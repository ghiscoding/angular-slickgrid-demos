{"version":3,"mappings":"mJAMA,WACA,8BAIA,IACA,qCAA8CA,gBAE9C,GADAC,oBACA,uBAGA,mDAEIC,GACJ,oBACA,QACA,gBACAC,oBACAC,6BAEAC,uCACAC,gBACAC,EACAH,UACAA,aACAA,UAEAI,mBACAH,4BACAG,aACA,IACAC,+CACAC,eACA,kBAGUC,GACVC,2BAGAP,GAGAQ,mCACAC,sBA5CA,4BAOA,YACA,sBACA,eACAC,sBAEA,iBACAA,8BAEAC,UAIA,kDACA,eACA,YAEA,6CACA,WAUA,2CACA,wCAGA,cAGA,QACAC,iBACAL,eACAA,wCACAA,qCACAA,mBACA,kFAGA,mCACA,iTAOAM,kBACA,gBACA,eACAC,WAEA,SAEAC,qBACA,eAEAC,yBACA,8BAGAF,UACA,yBAIA,SACA,iDAGAG,wBACA,kBACAN,KACAO,gBACAC,QAGAC,aACA,oBAEAC,WACA,kBAEAhB,OACA,4BACA,KACA,wBAEAiB,eACA,WACA,SACA,mCACA,SAEAC,YAEA,YAEAC,QACA,MACA,sCACA,uCAEAC,UACA,wBACA,8CAEA,+CACAC,OACA,kBACA,yCAGAC,aACAC,IAAkCR,qBAClC,IACA,uDAGAQ,cAGAC,yBACAD,IAAkCR,qBAClC,IACA,IACA,qDAEAU,IACA,2CACA,kBAKAF,cAGAG,eACA,gBACA,+EACAjB,iCAAqDP,eAKrD,4CACA,OAEA,mBACAmB,yBACAZ,aACA,YACAkB,KACAJ,IAAkCR,qBAClC,IACAN,yCACAA,mBAEA,IACA,uDAEAmB,IACA,2CACA,kBAOAnB,4BACAA,sCACAY,0BAGAZ,aACAP,4BACAmB,GACAZ,2BAGAc,aACAI,OAGAE,gBACA,0BAGA,WACA,SACA,cACA,0CAAkE3B,uDAAuDO,eAEzHqB,YAGArB,uBACA,WACAA,mBACAA,aACA,IACAA,gDAEAqB,GAGA,+BAEA5B,uCACA4B,EAEA,6BAEA5B,2BAEAO,aACAA,uBAEAA,EAEAsB,2BACA,mDAEAC,8BACA,+CAEAC,8BACA,+CAEAC,cACA,gBACA,qFACAzB,iCAAqDP,eACrDO,yBACA,IACAP,4CAEAgB,GAEA,4BACAhB,uCACAgB,EAEA,mCACAT,uBACAA,aACAA,EAEA0B,sBACA,0BACA,OACA1B,uBAEA,YAA4BY,WAA0BA,IACtDS,iCAKAM,eACA,UACApB,QACAqB,sCACAC,gDACAC,sDACAC,6CAEA,QACAjC,mBACAL,kBAAiCuC,qCACjCvC,YACAA,uBACAA,0CACAA,2CACAA,mBACA4B,wCACA5B,kBACA4B,oCACA5B,oBACA4B,sCACA5B,wBACA4B,kDACA5B,6CACAA,iBACA4B,gCACA5B,qBACA4B,4CACA5B,oBACA4B,wCACA5B,sBACA4B,0CACA5B,0BACA4B,sDACA5B,qBACA4B,0CACA5B,2BACA4B,wCACA5B,2BACA4B,wDACA5B,mBACA4B,sCACA5B,qBACA4B,wCACA5B,yBACA4B,oDACA5B,mBACA4B,sCACA5B,qBACA4B,wCACA5B,yBACA4B,oDACA5B,qBACAA,uBACAA,4BACAA,2BACA,uBACAuB,oBACAJ,SAGAnB,uBACAA,oBACAA,4BACAA,wBACA4B,mBACA5B,wBACAA,yBACAA,sCAEA4B,iBACA5B,sBACAA,uBACAA,oCAEA4B,iBACA5B,sBACAA,uBACAA,qCAIAiB,UACA,sEACA,WAEAuB,iBACA,yBACAxC,iFACAgB,EAEAyB,mBACA,gGACAzB,aAEA0B,iBACA,4BACA1C,uFAGA2B,kBACA,QACA,wBACA3B,iBACA4B,8CAGAA,6FAEAA,IACAA,aAGAZ,aACAA,wBAEAA,WAIA,+CAHA2B,MAMA,SAEAC,oBACA,iHACA5B,sBAEAgB,gBACA,MACA,sBACAJ,yFAEA,CACA,eACA,sCAEAA,gBAEA,SAEAiB,aAGA,IACA7C,iBACAA,6EAEA4B,GACA5B,uBAIAiC,sBACA,yBACAd,OACAI,YACA,QACA,4DAEA,gBACA,UACAgB,wBACAO,wBACAC,wBACAC,UAEAhD,6BAIA,QACAK,2BAaA,GAXAL,gBACAA,gBAEAA,yBAEAA,2BACAA,YACAA,cACAA,YACAA,mBACAA,kBACA4B,EACA,2CAEA5B,gBACA,aAEAO,kBACAP,yBAGAA,uBACA,gEAIAO,OACAA,IACAA,QAEA0C,KACA,IACA,oBACA1C,8BAGA,OACA2C,IAEAD,MAGAE,WACA,kBAEAC,YACA,mBAEAC,wBACArD,0BAGAsD,qBACA,oCAOA,mBAAmCtD,cAAcA,wCAAwCO,wBAA8BS,KAAcY,4BAAwD5B,iBAN7LA,cACAO,QACAP,0BAOAuD,WACA,8CACAvD,8BAGAH,qCAKA2D,SACA,OACAC,eACAL,iBACAM,mBACAP,oBACAQ,yBASA,yBACAC,gBACAC,aACA,IAEAC,GAFAC,MACAC,MAEA,gBAMA,GALAF,IACApD,QACAoD,qBAGAA,IACA,aACAvD,IAGAA,WAEAA,mBAGAG,YAGA,gBAGA,uBAEAuD,MAEAC,gBAEA,aACA,QAEA,IADAF,MACAD,YACA,YACAA,MACA,YAAgCxD,YAAkBA,KAClD,cACA,IACAS,kCAEAY,GACAuC,yBAIAA,wBACAH,OAQA,UAAsBlD,gBACtBsD,wFACAC,6CACA1D,MACAwD,IACAG,SACAC,wBACAC,oBACAC,sBACA5C,qBACA6C,+DACAC,wBACAC,qBACAC,mBACAC,qBACAC,iBACAC,sBACAC,2BACAC,kBACAC,wBACAC,4BACAC,sCACAC,oBACAC,kBACAC,kBACAC,2BACAC,wBACAC,6BACAC,yBACAC,sBACAC,4BAEA,QAA8BjF,mCAC9BY,QACAwB,KACA,eACArC,iBACAF,SAhnBA,CAinBC,4EAiBD,wCAEAT,wBAEAX,wBAEAK,gBAEAH,wBAEAC,qBAEAG,wBAEAG,qBAEAgG,qBAEAC,SAEAC,UAEAC,sBACA,gBACA,8BAEA,sBACA,iDAEA,wBACAC,6BACAC,kBACAC,4CAEA,gBACA,qBAAkCjG,KAAQA,IAC1C,0BACAM,sBAGA,SAsBA,cACA,WAGA,kBAGA,0CAEA,iFAGA4F,mCACM,qBAAN,GAAM/C,yBACNgD,gCAIAC,sBACM,qBAAN,GAAMjD,iCACN4C,mBACAM,KACAC,cAIA,KADAhG,cAEA,OAEA,gBACAP,IACAA,qCAEA,0BACAS,OACA,MACA,+BAIA,UACA+F,KACA/F,4DACA,OACAF,wBAIAiG,6BACA,aACAjG,mBAGA,UAEA,kBACA,aAUA,IATAE,MAEAvB,SAEAuB,GAAqBgG,iCAKrBhG,mBACA,OAEA,4BACA,6BACA,cAOAA,kBACAA,QACA,cACAiG,QAEA3E,cACA,YACA4E,KACAA,4BAEAlG,kBAGA,YACAmG,WACAA,KAEAA,IAIA,mBADAA,OAEAA,2BAIAF,kBACAE,QACA,sBACAA,6BAKAnG,iBAGA,WAIA,IAHAoG,WACAA,MAEAA,EACA,YAEA,cACA,KACA,SAEA,MAOA,oBACA,MACA,2BACA,sCACAA,qBAEAC,GAGA,aAEAhH,SACAS,QAEA,kBACA,KACA,YAAwBE,WAAuBA,IAC/CsG,qBAGA,CACA,WACA,iBACA,qBACAtG,UAGA,YAAwB+F,WAAyBA,IACjDO,aAIA,8BAEA,eACA,aACA,MACA,OAEAb,UACAA,gBACA,uBACA,sBACA,EACArG,cACA,WACA,EACAA,oBACA,WACA,EACAA,yBACA,WACA,EACAA,8BACA,WACA,EACAA,mCACA,cAEA,wCAIAmH,WACA,4BACA,MACA,WAEA,0CAEA,YACA,wBACAd,6BACA,4CAIApG,oBACAmH,gBACA,sBACApH,wBAIAmH,kBAGAnH,cAGAF,eACA,qBArBA,CAyBSc,GAET,WACA,uCACAyF,cAIA,mBACA,QACA,8BACAzF,QAEAA,UAEAA,KAEA,aACA,WACA,yCACAyG,YAIA,KADAzG,WACA,CACA,iBACAA,gBACA,0BAEAuG,YAGA,SAGA,mBACA,WACA,cACA,eACA,kCACAE,gCAEAzG,yBACAyG,EAEAzG,0BACA,gBACA,mDACA0G,4BAIAD,eAIA,iBACA3G,2BAEA,UACA6G,MAYA,cACA,MACA,UAEAC,MACA,IACA,gCACA,+EACAD,aAGA7G,IAEA,UAUA+G,+CACA,wCACAd,wBAQA,iBACAzE,KACA4E,4DACAE,eACAD,YAEA3G,uBACA,0BACA,uBACAsH,EACAC,sFAA6HC,sBAAwBA,iCAAoCF,qCAGzLC,mBAIAvH,0BACA,gBACA,kBACA,IACAwH,uBACA,sBACAA,YAEAA,UAGAF,GACA7D,SAIA,+CACA,eACAzD,sBACA,IACA,cACA,sBACAsH,qBAGAA,KAGA,eACA,iBAEA,eACA,SAEA,eACA,mBAEA,oBACA/E,cACAO,eACA2E,2BACAzD,2BAEA0D,QACAC,KACAC,MAEA,iBACA,WACA,IACA7D,gBAEA8D,GACA9D,aAKA,MAaAxD,yBAEA,mBACA,QAhBA,WACA,SACA,mBACA,kBACAiH,IAGAA,KACAM,2BAQAC,GACA,SACA,oBANA,gCAQA,eAEA,WACA,KACA,4CACAC,mBAGAC,IACA,cACAlE,aADA8D,GAGAL,EAGA,2BACAM,4CACAA,WACAzG,MACA0C,0BAEAuD,6BACA,IACAU,uCAEAC,IACAJ,OACA9D,aADA8D,OAKA,CACAL,QACA,eAaA,GAZAA,QACAA,UAEAF,QAGAE,YACAA,aAKAF,4BAEA,2CACAvH,qCACAmI,GAEA3B,QAAiF4B,oDAGjF,YAAgCD,aAChCrF,sCAEA,wBACA2E,MA3FA,EA4FA,QACA,IAIA,0CAvKA,cACA,6CAEA,OADAA,mCACA,2BAEA,wDAkKAP,KACAa,mCAEAM,IACAF,KAEAxB,KAGAwB,oBAEAA,cACAA,YACAA,iBACAA,qBACApG,UACA9B,wBAKA,SAEA,sCACA,eACA,GA1HA,IA0HAwH,OAMA,IACA,cACAF,yBACAA,aAAyCe,kCAGzCf,IAEAE,SACA,YAA4BF,WAAmCA,IAC/DE,kBACA1F,eAKA,uBACAT,MACA,eACA6G,KACA,0BACA,uBACAxE,GACA4D,oBA3JA,eA2JA,KACA,IACA,eACAgB,iBACAA,KAEAR,SACAA,UAGA,2CACA,GACA,MACA/D,kBAEAqE,IAEArE,cAES+D,GAET,MACAhE,gBACA3D,mBACA,0BAEA,MALA,gDAKAoI,eAEAjB,GACA,4CAEAA,GACA,0CAEAA,GACA,6CACA,8DAEA,WACA,QACA,IACA,eACAO,IACAC,2BAGAI,GACA,8DAEA,SACA,8DAEA,SACA,YACA,sBACA,aAAgCI,YAAqBA,KACrDR,gBACAE,IAGAA,KACAE,QACqBM,KACrBP,YACAJ,IACA,QACAG,KACAI,4DAOAd,GACA,MACAO,EACAG,qBACAF,KACAD,OAEA,gBACAC,MAEA,eACAD,MAEA,gBACAlE,SACAyE,qBAEAA,cAEA,oBAEAd,GACA,8CAEAA,GAEA,OADA1H,0CACA6I,mBACAC,kBAA4CC,6BAC5CC,mBAA2CD,sDAG3CrB,KACA,MACAU,EACAC,sBACAJ,KACAG,OAGAE,IACAE,KACA,YACA,iBACAzE,SACA6E,qBAEA,YACA,IACAA,aACAF,+BACAJ,IACA,OACAL,OAEqBgB,KACrBf,GAIAQ,2BACAJ,IACA,OACAL,OANAG,cAWAa,IACAb,MAEAE,IACAE,KAGA,YACA,OACAP,MAEAI,GAEAhI,eACA,aACA,qBACA,kDAEA6H,SACAA,SACA,IACAR,6BAEAO,GACA9D,YAGA+E,0BACA,gBAEAC,sBACA,SAEAC,UACA,yCACAnB,2BACAA,uBAEA,kBACAI,aACA,oBACArI,wBAGAiD,kBAEAmF,EAEAiB,SACA,yBAEAC,WACA,yCACApB,2BACAA,KAEA,kBACAD,OACA,kBACA,oBACAjI,uBAGAiD,iBAEAgF,GAKAjH,oBACAA,kBACAA,cACAA,YACA,uBACAN,YACA,yBACA,eACA,oBACAwH,cACA,yCAGA,OAEA,eAEAR,OACAE,gCAIA,WAHA5G,YACAiH,qBAEAmB,YAEAxB,QAgBA,OAdAxH,eAcAwB,IACAL,MACAgI,gBAfA,eACA,qBACA,mBACA,kBACA,SAEA,oBACA,aACAhI,MAEA0G,GAKAvG,MAGA8H,iDACAxI,IAYAyG,iCAEA,oCACArH,wBACAQ,eACA+F,aACAU,aACA,4BACA,gBACA,KACA,2BACAlH,UAGAN,kCAGA,mBACA,aACA,KACA,iBAGA,iBACA,aACA,KACA,kBAIA,qBAEAwH,OACAoC,8BAEA,kCAEA5J,qCACA,0DAFA,mBAKAgH,gBAWA,UACA,8BACA,IACA,iCAAgD,WAChD/G,eACA4J,SAMAxJ,oCACAA,6CAEAQ,GACAgJ,MAIA,UACAC,SAEAC,MACAC,MACAC,2CACAC,2BACA,iBACA,qBACAnJ,eACA+F,MACAU,MACAuC,SACAA,WACAA,WAEA,qBACA,oBACAvC,aACAR,mCACA3E,mCACA4E,QACAE,YACAD,oBAEAnD,qBAGA,gBACA,OAEA,qBAUA,OATA,sCAEAjB,iCACAA,wBAOA,IACAA,2BAEAoF,GACAiC,KAEA,oBACA,qCAIA,4DACA9G,0BAEA,WAEA,qBAIA,KADAA,cAEA,OAIA,yBACA8G,0BACA,OACA,YAGA,kBACA,uBACAjC,kBAEA,CAIA,mBACA,aAAgCC,eAChC9E,eADsD8E,MAItD,uBACAiC,eAKA,iBACA,YAGA,YAAgClC,YAAmBA,KACnD,eACA5H,+BACA,aAOA,sBACA,uBAGA6D,gBACA,uBAEA,kBACA,OACA,SAEA,UACAd,qBACA2E,WAEA,iBACA,UACA3E,uBACA8G,aAEA,UACA9G,mBACA4E,SAEA,SACA,8BACAC,OASA,IAPAA,WAEAA,OAEAA,GAGAA,MACA,SAEA,gCAGAkC,KACA5F,cACA8D,WACAJ,KACAmC,WACAnC,KACApH,WACAoH,KACA,OASA,iBACA,mCAIAG,UAEAwB,MAGA,oBACA,CAAyBS,sBAEzBjC,EAGA,mCACArI,+BAAqDqI,IAAckC,aAEnElC,EALA,CAAyBkC,YANzBlC,EAhBAhF,eACAiB,mBACA4D,cA2BA,MAsDA/G,KAtDA,YAGA,iBAGA,gEAuCA,YACA,yDASAY,KA/CA,YAIA,iBACA,wBACA,MACAqG,IACAG,oBAEA,wBACA,MACA,YAAoCE,YAA0BA,IAE9D,GADAD,QACAH,GACAG,eAEAH,eACA,gBAGAA,gBACAA,kBAEA,OAQA,gBAGA,gEAQA,YACA,yDASA3G,oBALA,cACA,iBACA,sCACA,sCAGAG,+BACAkG,yBACAF,gCACA,kBACA,iBACA,oBACAxE,yBACA0F,4BAEA,oBACA,OACA,+BAEA,+BAEA,+BAKA,UACA,0BACA,mBACA,+BAEAK,MAEA,8BACA,OAEA,qCACAoB,uBACA,MAEA,aAAoCC,aAA4BA,KAChE,eACA,UACApC,oBAGAA,wBAKA,kDACAqC,wCACAC,gBACA,cACAC,KACAC,UACAD,WAEA,oBACA,IAiBAE,GAjBAC,UACAC,MACA,OAGA,GADAA,MACAb,GACA,aAAwCM,aAA0BA,KAClE,iBAEA,YAMAM,aAGA,6BACAE,UACAA,KACAH,WAEAA,KACAA,SACA3C,eAIAiC,aACAM,KAIAN,mBAEAA,YACAA,aACAA,eACAA,gBACA,sBAEAc,KACAA,eAEA,6CA+BA,OA5BAd,cAEAc,KACAA,kBAIAR,KACAF,aAEAX,mCAGAsB,eAEAA,aACAA,cACAA,gBACA/B,KAEA+B,wBAEAxC,GAIAoC,eAHAA,YAKAtC,EACAI,QADA,IAKA,2BACAvE,KACA4D,UAxWA,oBAiNA,YACA,yDAsJAnG,UAEAmG,gBACA,gBACA,mBACA7E,yBACA+E,0BAEA,qBACAI,yCACAC,eACA,MACA,gCAEA,QACAlE,qBACA,OAEA,eACA,OACAoE,KACAE,eAEA,mBACA,MACA,aAAgCuC,aAA0BA,MAC1D,gBACA,aAIA,GAHArC,gBAEAK,gBACA,gBAGAA,iBACAf,WAIA,qBAEAA,EADAhC,mBACA,KAIA,OADA+C,uBACAnB,GACAI,OAEA,GAQA,iCAEAH,gBACA,gBACA,mBACA7E,yBACA+E,0BAEA,WACAI,oBACA,YAA4BC,YAAkBA,KAC9C,eACA,2DACAF,WAEA,UAEAL,gBACA,gBACA,mBACA,KAiBA,CACA7E,yBACA+E,0BAEA,cACA,MACA,cACAK,OACAE,SACAE,QACA,OACA,oBACA,aAAwCuC,aAAwBA,MAChE,gBACA,2DACAjL,oCAGA,OACA,oBACA,aAAwCiL,aAAwBA,MAChE,gBACA,2DACAjL,0CAxCA,CACA,uBACA,aAAgCqI,YAAiBA,MACjD,cACAG,cACA,iBAKAE,2BACA1I,sBAIAA,oCA8BA,MACA,aAIAmH,YACAA,YACAxG,IACAwG,YAEA+C,IACA/C,aAEA,EAEA,UACA,aAAoBxE,YAAiBA,KACrCsB,mBAEA,UAEA,iBACA,OACA,WACA,gBACA,mBACA,eACA,qBACA,aACA,KACA,YAAoC8C,WAAkBA,IACtDM,cAKA,SAEA,YACAjH,IACAsK,MACAtK,SAEA,gBACAuG,UACA,SAIAA,cACA/F,UAJA+F,eAOA,iBACA,gBACAvG,gBACAD,sEACAwG,SAIA/F,kBAYA,uBACA,2BACA,QACA,OAEA,kBACAT,sBACA,yBACAwG,sBACA,YAAkCvG,KAAcQ,MAAOmG,EACvDnD,gBACA,yBACA,gDACAC,cACAA,4CACAnD,wCAEAkD,QACAA,4CAGAA,QACAA,yCAIAiD,kBAEAnG,gCAUA,mBACA,oBACA,SAEA,kCACA,oBACA,SAEA,8BACA,sCAEA,qBAGA,MACA,OAGAwK,IADAC,UACAvK,GAMA,eACA,qCACAwK,0CACAC,uBAEA,iBAIA,GAHA/E,OAGAmB,8BAEA,OAEA,sCAEA,SACA,MACA,eACA7G,YACA,qFACA,6FAEA,QA5uCA,cACA,IACA,8BACA,uDACA,eAGAF,IAEA,SAmuCA4K,KAAkDC,sCAAqD,GAGvGC,gCAEA5K,YACA,wFACA,yDAEA,YAAoB+F,WAAyBA,KAC7C,gBACAU,gBACAmE,mCAWA/D,mCAGA,cACArH,sBACAA,iBACAA,kBACAA,oBAOA,4CACAiH,mCACA3G,OACAA,WAEAA,OACAP,UACAO,MAEAN,yBACAA,sBACAA,gBACAA,yBACAA,mCACAA,iBACAA,eACAA,gBACAA,wBACAA,sBACAA,2BACAA,0CACAA,oBACAA,yBACAqL,iBACAC,wBACAC,aACAC,YACAC,QACAC,SACAC,WACAC,YACAC,qBACAC,yBACAC,gCAWA,uBACA,qBACA,WACA9E,OAEAjH,KACA,WACA,cACA,eACA,4BACA,uCAEA2G,6BACAC,EAEA,eACA,iCAEAL,EACA4C,KAfApJ,KAeA6G,kBACA,6BACA,UACAoF,0BACAC,kDACA,EACAC,SAEAzI,SACAoD,iBACA,IACA,wCAUArD,gBACA,oCAGAiD,eAEAjD,cAGAA,yBAKA,4BACA,OACA,UAGA,0BAkBA,MAjBA,oBAGAiD,SAEA7C,KAGAA,WAIAA,iDACA,8BACAD,uBACAA,4BAEA,wBACAC,GAEAD,GAIA,uBAGAsD,EACAkC,yBACA,eACA,OACA,oBAEA1F,UAIAA,cAEAA,KACAA,QAGAA,6BACA,4BACAA,oDACA,2BACAgD,MAEAjD,KACAA,aAGAC,wBAKAmD,gBA+DAS,+BACA,0CACAtH,GACAA,MAGAsH,6CACArH,oCACA,cACAD,uDAIAsH,+BACA,cACArH,UACAmM,oBACAA,qBACAA,wBAEA9E,8CACA8E,0CACAA,gDACAA,wDAEA9E,qCACA,qCACA,YAAoB7G,WAA4BA,KAChD,aACA2I,gB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","names":["cancelable","o","t","bubbles","e","n","initCustomEvent","r","a","Object","get","i","this","y","window","f","P","constructor","root","h","current","currentTask","s","Ht","T","parent","name","getZoneWith","d","fork","wrap","_","run","bt","runGuarded","mt","runTask","Bt","Ft","scheduleTask","E","scheduleMicroTask","scheduleMacroTask","scheduleEventTask","cancelTask","_updateTaskCount","z","onHasTask","onScheduleTask","onInvokeTask","onCancelTask","microTask","intercept","invoke","handleError","at","invokeTask","hasTask","macroTask","eventTask","change","Zt","V","zone","state","cancelScheduleRequest","_transitionTo","toString","toJSON","type","source","runCount","ct","lt","At","Pt","yt","Mt","gt","jt","pt","ft","symbol","currentZoneFrame","onUnhandledError","microtaskDrainDone","showUncaughtError","patchEventTarget","patchOnProperties","patchMethod","bindArguments","patchThen","patchMacroTask","patchEventPrototype","isIEOrEdge","getGlobalObjects","ObjectDefineProperty","ObjectGetOwnPropertyDescriptor","ObjectCreate","ArraySlice","patchClass","wrapWithCurrentZone","filterProperties","attachOriginToPatched","_redefineProperty","patchCallbacks","nativeScheduleMicroTask","v","c","u","l","b","R","m","S","C","j","B","K","I","enumerable","W","tt","X","q","dt","Q","nt","set","M","p","Et","wt","Zone","L","console","N","Nt","ht","U","Tt","Z","x","et","J","rt","Y","configurable","st","rejection","it","static","ut","allWithCallback","thenCallback","status","errorCallback","xt","toStringTag","species","then","catch","finally","vt","Promise","Function","Vt","useG","Dt","$t","Gt","Qt","Ct","H","Lt","capture","passive","zt","Xt","ue","me","ne","oe","te","Jt","le","ve","qt","Ut","Ot","G","se","filter","map","It","target","ie","globalSources","zoneSymbolEventNames","eventNames","isBrowser","isMix","isNode","TRUE_STR","FALSE_STR","ZONE_SYMBOL_PREFIX","ADD_EVENT_LISTENER_STR","REMOVE_EVENT_LISTENER_STR","isPeriodic","delay","args","Yt","Te","Ee","ot","pe","ge","Rt","k","ae","forEach","promise","value","g","O","includes","indexOf","D","$","some","every","find","findIndex","filterReject","w","A","F","next","done","return","Array","getConstructor","index","first","last","size","that","key","previous","removed","clear","delete","has","add","setStrong","kind","id","frozen","St","prototype","global","writable","Kt","kt","values","keys","entries","bind","EXISTS","PROPER","CONFIGURABLE","hasOwnProperty","objectID","weakData","enable","getOwnPropertyNames","fastKey","getWeakData","onFreeze","enforce","getterFor","IteratorPrototype","BUGGY_SAFARI_ITERATORS","Symbol","document","open","concat","isPrototypeOf","propertyIsEnumerable","store","getMap","toKey","TypeError","version","mode","copyright","license","String","defineMetadata","deleteMetadata","getMetadataKeys","getMetadata","getOwnMetadataKeys","getOwnMetadata","hasMetadata","hasOwnMetadata","metadata"],"sources":["./node_modules/@angular-devkit/build-angular/src/babel/webpack-loader.js","./node_modules/source-map-loader/dist/cjs.js"],"sourcesContent":["'use strict';\n/**\n * @license Angular v14.0.0-next.5\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n((function (global) {\n    const performance = global['performance'];\n    function mark(name) {\n        performance && performance['mark'] && performance['mark'](name);\n    }\n    function performanceMeasure(name, label) {\n        performance && performance['measure'] && performance['measure'](name, label);\n    }\n    mark('Zone');\n    // Initialize before it's accessed below.\n    // __Zone_symbol_prefix global can be used to override the default zone\n    // symbol prefix with a custom one if needed.\n    const symbolPrefix = global['__Zone_symbol_prefix'] || '__zone_symbol__';\n    function __symbol__(name) {\n        return symbolPrefix + name;\n    }\n    const checkDuplicate = global[__symbol__('forceDuplicateZoneCheck')] === true;\n    if (global['Zone']) {\n        // if global['Zone'] already exists (maybe zone.js was already loaded or\n        // some other lib also registered a global object named Zone), we may need\n        // to throw an error, but sometimes user may not want this error.\n        // For example,\n        // we have two web pages, page1 includes zone.js, page2 doesn't.\n        // and the 1st time user load page1 and page2, everything work fine,\n        // but when user load page2 again, error occurs because global['Zone'] already exists.\n        // so we add a flag to let user choose whether to throw this error or not.\n        // By default, if existing Zone is from zone.js, we will not throw the error.\n        if (checkDuplicate || typeof global['Zone'].__symbol__ !== 'function') {\n            throw new Error('Zone already loaded.');\n        }\n        else {\n            return global['Zone'];\n        }\n    }\n    class Zone {\n        constructor(parent, zoneSpec) {\n            this._parent = parent;\n            this._name = zoneSpec ? zoneSpec.name || 'unnamed' : '<root>';\n            this._properties = zoneSpec && zoneSpec.properties || {};\n            this._zoneDelegate =\n                new _ZoneDelegate(this, this._parent && this._parent._zoneDelegate, zoneSpec);\n        }\n        static assertZonePatched() {\n            if (global['Promise'] !== patches['ZoneAwarePromise']) {\n                throw new Error('Zone.js has detected that ZoneAwarePromise `(window|global).Promise` ' +\n                    'has been overwritten.\\n' +\n                    'Most likely cause is that a Promise polyfill has been loaded ' +\n                    'after Zone.js (Polyfilling Promise api is not necessary when zone.js is loaded. ' +\n                    'If you must load one, do so before loading zone.js.)');\n            }\n        }\n        static get root() {\n            let zone = Zone.current;\n            while (zone.parent) {\n                zone = zone.parent;\n            }\n            return zone;\n        }\n        static get current() {\n            return _currentZoneFrame.zone;\n        }\n        static get currentTask() {\n            return _currentTask;\n        }\n        // tslint:disable-next-line:require-internal-with-underscore\n        static __load_patch(name, fn, ignoreDuplicate = false) {\n            if (patches.hasOwnProperty(name)) {\n                // `checkDuplicate` option is defined from global variable\n                // so it works for all modules.\n                // `ignoreDuplicate` can work for the specified module\n                if (!ignoreDuplicate && checkDuplicate) {\n                    throw Error('Already loaded patch: ' + name);\n                }\n            }\n            else if (!global['__Zone_disable_' + name]) {\n                const perfName = 'Zone:' + name;\n                mark(perfName);\n                patches[name] = fn(global, Zone, _api);\n                performanceMeasure(perfName, perfName);\n            }\n        }\n        get parent() {\n            return this._parent;\n        }\n        get name() {\n            return this._name;\n        }\n        get(key) {\n            const zone = this.getZoneWith(key);\n            if (zone)\n                return zone._properties[key];\n        }\n        getZoneWith(key) {\n            let current = this;\n            while (current) {\n                if (current._properties.hasOwnProperty(key)) {\n                    return current;\n                }\n                current = current._parent;\n            }\n            return null;\n        }\n        fork(zoneSpec) {\n            if (!zoneSpec)\n                throw new Error('ZoneSpec required!');\n            return this._zoneDelegate.fork(this, zoneSpec);\n        }\n        wrap(callback, source) {\n            if (typeof callback !== 'function') {\n                throw new Error('Expecting function got: ' + callback);\n            }\n            const _callback = this._zoneDelegate.intercept(this, callback, source);\n            const zone = this;\n            return function () {\n                return zone.runGuarded(_callback, this, arguments, source);\n            };\n        }\n        run(callback, applyThis, applyArgs, source) {\n            _currentZoneFrame = { parent: _currentZoneFrame, zone: this };\n            try {\n                return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);\n            }\n            finally {\n                _currentZoneFrame = _currentZoneFrame.parent;\n            }\n        }\n        runGuarded(callback, applyThis = null, applyArgs, source) {\n            _currentZoneFrame = { parent: _currentZoneFrame, zone: this };\n            try {\n                try {\n                    return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);\n                }\n                catch (error) {\n                    if (this._zoneDelegate.handleError(this, error)) {\n                        throw error;\n                    }\n                }\n            }\n            finally {\n                _currentZoneFrame = _currentZoneFrame.parent;\n            }\n        }\n        runTask(task, applyThis, applyArgs) {\n            if (task.zone != this) {\n                throw new Error('A task can only be run in the zone of creation! (Creation: ' +\n                    (task.zone || NO_ZONE).name + '; Execution: ' + this.name + ')');\n            }\n            // https://github.com/angular/zone.js/issues/778, sometimes eventTask\n            // will run in notScheduled(canceled) state, we should not try to\n            // run such kind of task but just return\n            if (task.state === notScheduled && (task.type === eventTask || task.type === macroTask)) {\n                return;\n            }\n            const reEntryGuard = task.state != running;\n            reEntryGuard && task._transitionTo(running, scheduled);\n            task.runCount++;\n            const previousTask = _currentTask;\n            _currentTask = task;\n            _currentZoneFrame = { parent: _currentZoneFrame, zone: this };\n            try {\n                if (task.type == macroTask && task.data && !task.data.isPeriodic) {\n                    task.cancelFn = undefined;\n                }\n                try {\n                    return this._zoneDelegate.invokeTask(this, task, applyThis, applyArgs);\n                }\n                catch (error) {\n                    if (this._zoneDelegate.handleError(this, error)) {\n                        throw error;\n                    }\n                }\n            }\n            finally {\n                // if the task's state is notScheduled or unknown, then it has already been cancelled\n                // we should not reset the state to scheduled\n                if (task.state !== notScheduled && task.state !== unknown) {\n                    if (task.type == eventTask || (task.data && task.data.isPeriodic)) {\n                        reEntryGuard && task._transitionTo(scheduled, running);\n                    }\n                    else {\n                        task.runCount = 0;\n                        this._updateTaskCount(task, -1);\n                        reEntryGuard &&\n                            task._transitionTo(notScheduled, running, notScheduled);\n                    }\n                }\n                _currentZoneFrame = _currentZoneFrame.parent;\n                _currentTask = previousTask;\n            }\n        }\n        scheduleTask(task) {\n            if (task.zone && task.zone !== this) {\n                // check if the task was rescheduled, the newZone\n                // should not be the children of the original zone\n                let newZone = this;\n                while (newZone) {\n                    if (newZone === task.zone) {\n                        throw Error(`can not reschedule task to ${this.name} which is descendants of the original zone ${task.zone.name}`);\n                    }\n                    newZone = newZone.parent;\n                }\n            }\n            task._transitionTo(scheduling, notScheduled);\n            const zoneDelegates = [];\n            task._zoneDelegates = zoneDelegates;\n            task._zone = this;\n            try {\n                task = this._zoneDelegate.scheduleTask(this, task);\n            }\n            catch (err) {\n                // should set task's state to unknown when scheduleTask throw error\n                // because the err may from reschedule, so the fromState maybe notScheduled\n                task._transitionTo(unknown, scheduling, notScheduled);\n                // TODO: @JiaLiPassion, should we check the result from handleError?\n                this._zoneDelegate.handleError(this, err);\n                throw err;\n            }\n            if (task._zoneDelegates === zoneDelegates) {\n                // we have to check because internally the delegate can reschedule the task.\n                this._updateTaskCount(task, 1);\n            }\n            if (task.state == scheduling) {\n                task._transitionTo(scheduled, scheduling);\n            }\n            return task;\n        }\n        scheduleMicroTask(source, callback, data, customSchedule) {\n            return this.scheduleTask(new ZoneTask(microTask, source, callback, data, customSchedule, undefined));\n        }\n        scheduleMacroTask(source, callback, data, customSchedule, customCancel) {\n            return this.scheduleTask(new ZoneTask(macroTask, source, callback, data, customSchedule, customCancel));\n        }\n        scheduleEventTask(source, callback, data, customSchedule, customCancel) {\n            return this.scheduleTask(new ZoneTask(eventTask, source, callback, data, customSchedule, customCancel));\n        }\n        cancelTask(task) {\n            if (task.zone != this)\n                throw new Error('A task can only be cancelled in the zone of creation! (Creation: ' +\n                    (task.zone || NO_ZONE).name + '; Execution: ' + this.name + ')');\n            task._transitionTo(canceling, scheduled, running);\n            try {\n                this._zoneDelegate.cancelTask(this, task);\n            }\n            catch (err) {\n                // if error occurs when cancelTask, transit the state to unknown\n                task._transitionTo(unknown, canceling);\n                this._zoneDelegate.handleError(this, err);\n                throw err;\n            }\n            this._updateTaskCount(task, -1);\n            task._transitionTo(notScheduled, canceling);\n            task.runCount = 0;\n            return task;\n        }\n        _updateTaskCount(task, count) {\n            const zoneDelegates = task._zoneDelegates;\n            if (count == -1) {\n                task._zoneDelegates = null;\n            }\n            for (let i = 0; i < zoneDelegates.length; i++) {\n                zoneDelegates[i]._updateTaskCount(task.type, count);\n            }\n        }\n    }\n    // tslint:disable-next-line:require-internal-with-underscore\n    Zone.__symbol__ = __symbol__;\n    const DELEGATE_ZS = {\n        name: '',\n        onHasTask: (delegate, _, target, hasTaskState) => delegate.hasTask(target, hasTaskState),\n        onScheduleTask: (delegate, _, target, task) => delegate.scheduleTask(target, task),\n        onInvokeTask: (delegate, _, target, task, applyThis, applyArgs) => delegate.invokeTask(target, task, applyThis, applyArgs),\n        onCancelTask: (delegate, _, target, task) => delegate.cancelTask(target, task)\n    };\n    class _ZoneDelegate {\n        constructor(zone, parentDelegate, zoneSpec) {\n            this._taskCounts = { 'microTask': 0, 'macroTask': 0, 'eventTask': 0 };\n            this.zone = zone;\n            this._parentDelegate = parentDelegate;\n            this._forkZS = zoneSpec && (zoneSpec && zoneSpec.onFork ? zoneSpec : parentDelegate._forkZS);\n            this._forkDlgt = zoneSpec && (zoneSpec.onFork ? parentDelegate : parentDelegate._forkDlgt);\n            this._forkCurrZone =\n                zoneSpec && (zoneSpec.onFork ? this.zone : parentDelegate._forkCurrZone);\n            this._interceptZS =\n                zoneSpec && (zoneSpec.onIntercept ? zoneSpec : parentDelegate._interceptZS);\n            this._interceptDlgt =\n                zoneSpec && (zoneSpec.onIntercept ? parentDelegate : parentDelegate._interceptDlgt);\n            this._interceptCurrZone =\n                zoneSpec && (zoneSpec.onIntercept ? this.zone : parentDelegate._interceptCurrZone);\n            this._invokeZS = zoneSpec && (zoneSpec.onInvoke ? zoneSpec : parentDelegate._invokeZS);\n            this._invokeDlgt =\n                zoneSpec && (zoneSpec.onInvoke ? parentDelegate : parentDelegate._invokeDlgt);\n            this._invokeCurrZone =\n                zoneSpec && (zoneSpec.onInvoke ? this.zone : parentDelegate._invokeCurrZone);\n            this._handleErrorZS =\n                zoneSpec && (zoneSpec.onHandleError ? zoneSpec : parentDelegate._handleErrorZS);\n            this._handleErrorDlgt =\n                zoneSpec && (zoneSpec.onHandleError ? parentDelegate : parentDelegate._handleErrorDlgt);\n            this._handleErrorCurrZone =\n                zoneSpec && (zoneSpec.onHandleError ? this.zone : parentDelegate._handleErrorCurrZone);\n            this._scheduleTaskZS =\n                zoneSpec && (zoneSpec.onScheduleTask ? zoneSpec : parentDelegate._scheduleTaskZS);\n            this._scheduleTaskDlgt = zoneSpec &&\n                (zoneSpec.onScheduleTask ? parentDelegate : parentDelegate._scheduleTaskDlgt);\n            this._scheduleTaskCurrZone =\n                zoneSpec && (zoneSpec.onScheduleTask ? this.zone : parentDelegate._scheduleTaskCurrZone);\n            this._invokeTaskZS =\n                zoneSpec && (zoneSpec.onInvokeTask ? zoneSpec : parentDelegate._invokeTaskZS);\n            this._invokeTaskDlgt =\n                zoneSpec && (zoneSpec.onInvokeTask ? parentDelegate : parentDelegate._invokeTaskDlgt);\n            this._invokeTaskCurrZone =\n                zoneSpec && (zoneSpec.onInvokeTask ? this.zone : parentDelegate._invokeTaskCurrZone);\n            this._cancelTaskZS =\n                zoneSpec && (zoneSpec.onCancelTask ? zoneSpec : parentDelegate._cancelTaskZS);\n            this._cancelTaskDlgt =\n                zoneSpec && (zoneSpec.onCancelTask ? parentDelegate : parentDelegate._cancelTaskDlgt);\n            this._cancelTaskCurrZone =\n                zoneSpec && (zoneSpec.onCancelTask ? this.zone : parentDelegate._cancelTaskCurrZone);\n            this._hasTaskZS = null;\n            this._hasTaskDlgt = null;\n            this._hasTaskDlgtOwner = null;\n            this._hasTaskCurrZone = null;\n            const zoneSpecHasTask = zoneSpec && zoneSpec.onHasTask;\n            const parentHasTask = parentDelegate && parentDelegate._hasTaskZS;\n            if (zoneSpecHasTask || parentHasTask) {\n                // If we need to report hasTask, than this ZS needs to do ref counting on tasks. In such\n                // a case all task related interceptors must go through this ZD. We can't short circuit it.\n                this._hasTaskZS = zoneSpecHasTask ? zoneSpec : DELEGATE_ZS;\n                this._hasTaskDlgt = parentDelegate;\n                this._hasTaskDlgtOwner = this;\n                this._hasTaskCurrZone = zone;\n                if (!zoneSpec.onScheduleTask) {\n                    this._scheduleTaskZS = DELEGATE_ZS;\n                    this._scheduleTaskDlgt = parentDelegate;\n                    this._scheduleTaskCurrZone = this.zone;\n                }\n                if (!zoneSpec.onInvokeTask) {\n                    this._invokeTaskZS = DELEGATE_ZS;\n                    this._invokeTaskDlgt = parentDelegate;\n                    this._invokeTaskCurrZone = this.zone;\n                }\n                if (!zoneSpec.onCancelTask) {\n                    this._cancelTaskZS = DELEGATE_ZS;\n                    this._cancelTaskDlgt = parentDelegate;\n                    this._cancelTaskCurrZone = this.zone;\n                }\n            }\n        }\n        fork(targetZone, zoneSpec) {\n            return this._forkZS ? this._forkZS.onFork(this._forkDlgt, this.zone, targetZone, zoneSpec) :\n                new Zone(targetZone, zoneSpec);\n        }\n        intercept(targetZone, callback, source) {\n            return this._interceptZS ?\n                this._interceptZS.onIntercept(this._interceptDlgt, this._interceptCurrZone, targetZone, callback, source) :\n                callback;\n        }\n        invoke(targetZone, callback, applyThis, applyArgs, source) {\n            return this._invokeZS ? this._invokeZS.onInvoke(this._invokeDlgt, this._invokeCurrZone, targetZone, callback, applyThis, applyArgs, source) :\n                callback.apply(applyThis, applyArgs);\n        }\n        handleError(targetZone, error) {\n            return this._handleErrorZS ?\n                this._handleErrorZS.onHandleError(this._handleErrorDlgt, this._handleErrorCurrZone, targetZone, error) :\n                true;\n        }\n        scheduleTask(targetZone, task) {\n            let returnTask = task;\n            if (this._scheduleTaskZS) {\n                if (this._hasTaskZS) {\n                    returnTask._zoneDelegates.push(this._hasTaskDlgtOwner);\n                }\n                // clang-format off\n                returnTask = this._scheduleTaskZS.onScheduleTask(this._scheduleTaskDlgt, this._scheduleTaskCurrZone, targetZone, task);\n                // clang-format on\n                if (!returnTask)\n                    returnTask = task;\n            }\n            else {\n                if (task.scheduleFn) {\n                    task.scheduleFn(task);\n                }\n                else if (task.type == microTask) {\n                    scheduleMicroTask(task);\n                }\n                else {\n                    throw new Error('Task is missing scheduleFn.');\n                }\n            }\n            return returnTask;\n        }\n        invokeTask(targetZone, task, applyThis, applyArgs) {\n            return this._invokeTaskZS ? this._invokeTaskZS.onInvokeTask(this._invokeTaskDlgt, this._invokeTaskCurrZone, targetZone, task, applyThis, applyArgs) :\n                task.callback.apply(applyThis, applyArgs);\n        }\n        cancelTask(targetZone, task) {\n            let value;\n            if (this._cancelTaskZS) {\n                value = this._cancelTaskZS.onCancelTask(this._cancelTaskDlgt, this._cancelTaskCurrZone, targetZone, task);\n            }\n            else {\n                if (!task.cancelFn) {\n                    throw Error('Task is not cancelable');\n                }\n                value = task.cancelFn(task);\n            }\n            return value;\n        }\n        hasTask(targetZone, isEmpty) {\n            // hasTask should not throw error so other ZoneDelegate\n            // can still trigger hasTask callback\n            try {\n                this._hasTaskZS &&\n                    this._hasTaskZS.onHasTask(this._hasTaskDlgt, this._hasTaskCurrZone, targetZone, isEmpty);\n            }\n            catch (err) {\n                this.handleError(targetZone, err);\n            }\n        }\n        // tslint:disable-next-line:require-internal-with-underscore\n        _updateTaskCount(type, count) {\n            const counts = this._taskCounts;\n            const prev = counts[type];\n            const next = counts[type] = prev + count;\n            if (next < 0) {\n                throw new Error('More tasks executed then were scheduled.');\n            }\n            if (prev == 0 || next == 0) {\n                const isEmpty = {\n                    microTask: counts['microTask'] > 0,\n                    macroTask: counts['macroTask'] > 0,\n                    eventTask: counts['eventTask'] > 0,\n                    change: type\n                };\n                this.hasTask(this.zone, isEmpty);\n            }\n        }\n    }\n    class ZoneTask {\n        constructor(type, source, callback, options, scheduleFn, cancelFn) {\n            // tslint:disable-next-line:require-internal-with-underscore\n            this._zone = null;\n            this.runCount = 0;\n            // tslint:disable-next-line:require-internal-with-underscore\n            this._zoneDelegates = null;\n            // tslint:disable-next-line:require-internal-with-underscore\n            this._state = 'notScheduled';\n            this.type = type;\n            this.source = source;\n            this.data = options;\n            this.scheduleFn = scheduleFn;\n            this.cancelFn = cancelFn;\n            if (!callback) {\n                throw new Error('callback is not defined');\n            }\n            this.callback = callback;\n            const self = this;\n            // TODO: @JiaLiPassion options should have interface\n            if (type === eventTask && options && options.useG) {\n                this.invoke = ZoneTask.invokeTask;\n            }\n            else {\n                this.invoke = function () {\n                    return ZoneTask.invokeTask.call(global, self, this, arguments);\n                };\n            }\n        }\n        static invokeTask(task, target, args) {\n            if (!task) {\n                task = this;\n            }\n            _numberOfNestedTaskFrames++;\n            try {\n                task.runCount++;\n                return task.zone.runTask(task, target, args);\n            }\n            finally {\n                if (_numberOfNestedTaskFrames == 1) {\n                    drainMicroTaskQueue();\n                }\n                _numberOfNestedTaskFrames--;\n            }\n        }\n        get zone() {\n            return this._zone;\n        }\n        get state() {\n            return this._state;\n        }\n        cancelScheduleRequest() {\n            this._transitionTo(notScheduled, scheduling);\n        }\n        // tslint:disable-next-line:require-internal-with-underscore\n        _transitionTo(toState, fromState1, fromState2) {\n            if (this._state === fromState1 || this._state === fromState2) {\n                this._state = toState;\n                if (toState == notScheduled) {\n                    this._zoneDelegates = null;\n                }\n            }\n            else {\n                throw new Error(`${this.type} '${this.source}': can not transition to '${toState}', expecting state '${fromState1}'${fromState2 ? ' or \\'' + fromState2 + '\\'' : ''}, was '${this._state}'.`);\n            }\n        }\n        toString() {\n            if (this.data && typeof this.data.handleId !== 'undefined') {\n                return this.data.handleId.toString();\n            }\n            else {\n                return Object.prototype.toString.call(this);\n            }\n        }\n        // add toJSON method to prevent cyclic error when\n        // call JSON.stringify(zoneTask)\n        toJSON() {\n            return {\n                type: this.type,\n                state: this.state,\n                source: this.source,\n                zone: this.zone.name,\n                runCount: this.runCount\n            };\n        }\n    }\n    //////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////\n    ///  MICROTASK QUEUE\n    //////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////\n    const symbolSetTimeout = __symbol__('setTimeout');\n    const symbolPromise = __symbol__('Promise');\n    const symbolThen = __symbol__('then');\n    let _microTaskQueue = [];\n    let _isDrainingMicrotaskQueue = false;\n    let nativeMicroTaskQueuePromise;\n    function nativeScheduleMicroTask(func) {\n        if (!nativeMicroTaskQueuePromise) {\n            if (global[symbolPromise]) {\n                nativeMicroTaskQueuePromise = global[symbolPromise].resolve(0);\n            }\n        }\n        if (nativeMicroTaskQueuePromise) {\n            let nativeThen = nativeMicroTaskQueuePromise[symbolThen];\n            if (!nativeThen) {\n                // native Promise is not patchable, we need to use `then` directly\n                // issue 1078\n                nativeThen = nativeMicroTaskQueuePromise['then'];\n            }\n            nativeThen.call(nativeMicroTaskQueuePromise, func);\n        }\n        else {\n            global[symbolSetTimeout](func, 0);\n        }\n    }\n    function scheduleMicroTask(task) {\n        // if we are not running in any task, and there has not been anything scheduled\n        // we must bootstrap the initial task creation by manually scheduling the drain\n        if (_numberOfNestedTaskFrames === 0 && _microTaskQueue.length === 0) {\n            // We are not running in Task, so we need to kickstart the microtask queue.\n            nativeScheduleMicroTask(drainMicroTaskQueue);\n        }\n        task && _microTaskQueue.push(task);\n    }\n    function drainMicroTaskQueue() {\n        if (!_isDrainingMicrotaskQueue) {\n            _isDrainingMicrotaskQueue = true;\n            while (_microTaskQueue.length) {\n                const queue = _microTaskQueue;\n                _microTaskQueue = [];\n                for (let i = 0; i < queue.length; i++) {\n                    const task = queue[i];\n                    try {\n                        task.zone.runTask(task, null, null);\n                    }\n                    catch (error) {\n                        _api.onUnhandledError(error);\n                    }\n                }\n            }\n            _api.microtaskDrainDone();\n            _isDrainingMicrotaskQueue = false;\n        }\n    }\n    //////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////\n    ///  BOOTSTRAP\n    //////////////////////////////////////////////////////\n    //////////////////////////////////////////////////////\n    const NO_ZONE = { name: 'NO ZONE' };\n    const notScheduled = 'notScheduled', scheduling = 'scheduling', scheduled = 'scheduled', running = 'running', canceling = 'canceling', unknown = 'unknown';\n    const microTask = 'microTask', macroTask = 'macroTask', eventTask = 'eventTask';\n    const patches = {};\n    const _api = {\n        symbol: __symbol__,\n        currentZoneFrame: () => _currentZoneFrame,\n        onUnhandledError: noop,\n        microtaskDrainDone: noop,\n        scheduleMicroTask: scheduleMicroTask,\n        showUncaughtError: () => !Zone[__symbol__('ignoreConsoleErrorUncaughtError')],\n        patchEventTarget: () => [],\n        patchOnProperties: noop,\n        patchMethod: () => noop,\n        bindArguments: () => [],\n        patchThen: () => noop,\n        patchMacroTask: () => noop,\n        patchEventPrototype: () => noop,\n        isIEOrEdge: () => false,\n        getGlobalObjects: () => undefined,\n        ObjectDefineProperty: () => noop,\n        ObjectGetOwnPropertyDescriptor: () => undefined,\n        ObjectCreate: () => undefined,\n        ArraySlice: () => [],\n        patchClass: () => noop,\n        wrapWithCurrentZone: () => noop,\n        filterProperties: () => [],\n        attachOriginToPatched: () => noop,\n        _redefineProperty: () => noop,\n        patchCallbacks: () => noop,\n        nativeScheduleMicroTask: nativeScheduleMicroTask\n    };\n    let _currentZoneFrame = { parent: null, zone: new Zone(null, null) };\n    let _currentTask = null;\n    let _numberOfNestedTaskFrames = 0;\n    function noop() { }\n    performanceMeasure('Zone', 'Zone');\n    return global['Zone'] = Zone;\n}))(typeof window !== 'undefined' && window || typeof self !== 'undefined' && self || global);\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Suppress closure compiler errors about unknown 'Zone' variable\n * @fileoverview\n * @suppress {undefinedVars,globalThis,missingRequire}\n */\n/// <reference types=\"node\"/>\n// issue #989, to reduce bundle size, use short name\n/** Object.getOwnPropertyDescriptor */\nconst ObjectGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n/** Object.defineProperty */\nconst ObjectDefineProperty = Object.defineProperty;\n/** Object.getPrototypeOf */\nconst ObjectGetPrototypeOf = Object.getPrototypeOf;\n/** Object.create */\nconst ObjectCreate = Object.create;\n/** Array.prototype.slice */\nconst ArraySlice = Array.prototype.slice;\n/** addEventListener string const */\nconst ADD_EVENT_LISTENER_STR = 'addEventListener';\n/** removeEventListener string const */\nconst REMOVE_EVENT_LISTENER_STR = 'removeEventListener';\n/** zoneSymbol addEventListener */\nconst ZONE_SYMBOL_ADD_EVENT_LISTENER = Zone.__symbol__(ADD_EVENT_LISTENER_STR);\n/** zoneSymbol removeEventListener */\nconst ZONE_SYMBOL_REMOVE_EVENT_LISTENER = Zone.__symbol__(REMOVE_EVENT_LISTENER_STR);\n/** true string const */\nconst TRUE_STR = 'true';\n/** false string const */\nconst FALSE_STR = 'false';\n/** Zone symbol prefix string const. */\nconst ZONE_SYMBOL_PREFIX = Zone.__symbol__('');\nfunction wrapWithCurrentZone(callback, source) {\n    return Zone.current.wrap(callback, source);\n}\nfunction scheduleMacroTaskWithCurrentZone(source, callback, data, customSchedule, customCancel) {\n    return Zone.current.scheduleMacroTask(source, callback, data, customSchedule, customCancel);\n}\nconst zoneSymbol = Zone.__symbol__;\nconst isWindowExists = typeof window !== 'undefined';\nconst internalWindow = isWindowExists ? window : undefined;\nconst _global = isWindowExists && internalWindow || typeof self === 'object' && self || global;\nconst REMOVE_ATTRIBUTE = 'removeAttribute';\nfunction bindArguments(args, source) {\n    for (let i = args.length - 1; i >= 0; i--) {\n        if (typeof args[i] === 'function') {\n            args[i] = wrapWithCurrentZone(args[i], source + '_' + i);\n        }\n    }\n    return args;\n}\nfunction patchPrototype(prototype, fnNames) {\n    const source = prototype.constructor['name'];\n    for (let i = 0; i < fnNames.length; i++) {\n        const name = fnNames[i];\n        const delegate = prototype[name];\n        if (delegate) {\n            const prototypeDesc = ObjectGetOwnPropertyDescriptor(prototype, name);\n            if (!isPropertyWritable(prototypeDesc)) {\n                continue;\n            }\n            prototype[name] = ((delegate) => {\n                const patched = function () {\n                    return delegate.apply(this, bindArguments(arguments, source + '.' + name));\n                };\n                attachOriginToPatched(patched, delegate);\n                return patched;\n            })(delegate);\n        }\n    }\n}\nfunction isPropertyWritable(propertyDesc) {\n    if (!propertyDesc) {\n        return true;\n    }\n    if (propertyDesc.writable === false) {\n        return false;\n    }\n    return !(typeof propertyDesc.get === 'function' && typeof propertyDesc.set === 'undefined');\n}\nconst isWebWorker = (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope);\n// Make sure to access `process` through `_global` so that WebPack does not accidentally browserify\n// this code.\nconst isNode = (!('nw' in _global) && typeof _global.process !== 'undefined' &&\n    {}.toString.call(_global.process) === '[object process]');\nconst isBrowser = !isNode && !isWebWorker && !!(isWindowExists && internalWindow['HTMLElement']);\n// we are in electron of nw, so we are both browser and nodejs\n// Make sure to access `process` through `_global` so that WebPack does not accidentally browserify\n// this code.\nconst isMix = typeof _global.process !== 'undefined' &&\n    {}.toString.call(_global.process) === '[object process]' && !isWebWorker &&\n    !!(isWindowExists && internalWindow['HTMLElement']);\nconst zoneSymbolEventNames$1 = {};\nconst wrapFn = function (event) {\n    // https://github.com/angular/zone.js/issues/911, in IE, sometimes\n    // event will be undefined, so we need to use window.event\n    event = event || _global.event;\n    if (!event) {\n        return;\n    }\n    let eventNameSymbol = zoneSymbolEventNames$1[event.type];\n    if (!eventNameSymbol) {\n        eventNameSymbol = zoneSymbolEventNames$1[event.type] = zoneSymbol('ON_PROPERTY' + event.type);\n    }\n    const target = this || event.target || _global;\n    const listener = target[eventNameSymbol];\n    let result;\n    if (isBrowser && target === internalWindow && event.type === 'error') {\n        // window.onerror have different signiture\n        // https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror#window.onerror\n        // and onerror callback will prevent default when callback return true\n        const errorEvent = event;\n        result = listener &&\n            listener.call(this, errorEvent.message, errorEvent.filename, errorEvent.lineno, errorEvent.colno, errorEvent.error);\n        if (result === true) {\n            event.preventDefault();\n        }\n    }\n    else {\n        result = listener && listener.apply(this, arguments);\n        if (result != undefined && !result) {\n            event.preventDefault();\n        }\n    }\n    return result;\n};\nfunction patchProperty(obj, prop, prototype) {\n    let desc = ObjectGetOwnPropertyDescriptor(obj, prop);\n    if (!desc && prototype) {\n        // when patch window object, use prototype to check prop exist or not\n        const prototypeDesc = ObjectGetOwnPropertyDescriptor(prototype, prop);\n        if (prototypeDesc) {\n            desc = { enumerable: true, configurable: true };\n        }\n    }\n    // if the descriptor not exists or is not configurable\n    // just return\n    if (!desc || !desc.configurable) {\n        return;\n    }\n    const onPropPatchedSymbol = zoneSymbol('on' + prop + 'patched');\n    if (obj.hasOwnProperty(onPropPatchedSymbol) && obj[onPropPatchedSymbol]) {\n        return;\n    }\n    // A property descriptor cannot have getter/setter and be writable\n    // deleting the writable and value properties avoids this error:\n    //\n    // TypeError: property descriptors must not specify a value or be writable when a\n    // getter or setter has been specified\n    delete desc.writable;\n    delete desc.value;\n    const originalDescGet = desc.get;\n    const originalDescSet = desc.set;\n    // substr(2) cuz 'onclick' -> 'click', etc\n    const eventName = prop.substr(2);\n    let eventNameSymbol = zoneSymbolEventNames$1[eventName];\n    if (!eventNameSymbol) {\n        eventNameSymbol = zoneSymbolEventNames$1[eventName] = zoneSymbol('ON_PROPERTY' + eventName);\n    }\n    desc.set = function (newValue) {\n        // in some of windows's onproperty callback, this is undefined\n        // so we need to check it\n        let target = this;\n        if (!target && obj === _global) {\n            target = _global;\n        }\n        if (!target) {\n            return;\n        }\n        const previousValue = target[eventNameSymbol];\n        if (typeof previousValue === 'function') {\n            target.removeEventListener(eventName, wrapFn);\n        }\n        // issue #978, when onload handler was added before loading zone.js\n        // we should remove it with originalDescSet\n        originalDescSet && originalDescSet.call(target, null);\n        target[eventNameSymbol] = newValue;\n        if (typeof newValue === 'function') {\n            target.addEventListener(eventName, wrapFn, false);\n        }\n    };\n    // The getter would return undefined for unassigned properties but the default value of an\n    // unassigned property is null\n    desc.get = function () {\n        // in some of windows's onproperty callback, this is undefined\n        // so we need to check it\n        let target = this;\n        if (!target && obj === _global) {\n            target = _global;\n        }\n        if (!target) {\n            return null;\n        }\n        const listener = target[eventNameSymbol];\n        if (listener) {\n            return listener;\n        }\n        else if (originalDescGet) {\n            // result will be null when use inline event attribute,\n            // such as <button onclick=\"func();\">OK</button>\n            // because the onclick function is internal raw uncompiled handler\n            // the onclick will be evaluated when first time event was triggered or\n            // the property is accessed, https://github.com/angular/zone.js/issues/525\n            // so we should use original native get to retrieve the handler\n            let value = originalDescGet.call(this);\n            if (value) {\n                desc.set.call(this, value);\n                if (typeof target[REMOVE_ATTRIBUTE] === 'function') {\n                    target.removeAttribute(prop);\n                }\n                return value;\n            }\n        }\n        return null;\n    };\n    ObjectDefineProperty(obj, prop, desc);\n    obj[onPropPatchedSymbol] = true;\n}\nfunction patchOnProperties(obj, properties, prototype) {\n    if (properties) {\n        for (let i = 0; i < properties.length; i++) {\n            patchProperty(obj, 'on' + properties[i], prototype);\n        }\n    }\n    else {\n        const onProperties = [];\n        for (const prop in obj) {\n            if (prop.substr(0, 2) == 'on') {\n                onProperties.push(prop);\n            }\n        }\n        for (let j = 0; j < onProperties.length; j++) {\n            patchProperty(obj, onProperties[j], prototype);\n        }\n    }\n}\nconst originalInstanceKey = zoneSymbol('originalInstance');\n// wrap some native API on `window`\nfunction patchClass(className) {\n    const OriginalClass = _global[className];\n    if (!OriginalClass)\n        return;\n    // keep original class in global\n    _global[zoneSymbol(className)] = OriginalClass;\n    _global[className] = function () {\n        const a = bindArguments(arguments, className);\n        switch (a.length) {\n            case 0:\n                this[originalInstanceKey] = new OriginalClass();\n                break;\n            case 1:\n                this[originalInstanceKey] = new OriginalClass(a[0]);\n                break;\n            case 2:\n                this[originalInstanceKey] = new OriginalClass(a[0], a[1]);\n                break;\n            case 3:\n                this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2]);\n                break;\n            case 4:\n                this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2], a[3]);\n                break;\n            default:\n                throw new Error('Arg list too long.');\n        }\n    };\n    // attach original delegate to patched function\n    attachOriginToPatched(_global[className], OriginalClass);\n    const instance = new OriginalClass(function () { });\n    let prop;\n    for (prop in instance) {\n        // https://bugs.webkit.org/show_bug.cgi?id=44721\n        if (className === 'XMLHttpRequest' && prop === 'responseBlob')\n            continue;\n        (function (prop) {\n            if (typeof instance[prop] === 'function') {\n                _global[className].prototype[prop] = function () {\n                    return this[originalInstanceKey][prop].apply(this[originalInstanceKey], arguments);\n                };\n            }\n            else {\n                ObjectDefineProperty(_global[className].prototype, prop, {\n                    set: function (fn) {\n                        if (typeof fn === 'function') {\n                            this[originalInstanceKey][prop] = wrapWithCurrentZone(fn, className + '.' + prop);\n                            // keep callback in wrapped function so we can\n                            // use it in Function.prototype.toString to return\n                            // the native one.\n                            attachOriginToPatched(this[originalInstanceKey][prop], fn);\n                        }\n                        else {\n                            this[originalInstanceKey][prop] = fn;\n                        }\n                    },\n                    get: function () {\n                        return this[originalInstanceKey][prop];\n                    }\n                });\n            }\n        }(prop));\n    }\n    for (prop in OriginalClass) {\n        if (prop !== 'prototype' && OriginalClass.hasOwnProperty(prop)) {\n            _global[className][prop] = OriginalClass[prop];\n        }\n    }\n}\nfunction patchMethod(target, name, patchFn) {\n    let proto = target;\n    while (proto && !proto.hasOwnProperty(name)) {\n        proto = ObjectGetPrototypeOf(proto);\n    }\n    if (!proto && target[name]) {\n        // somehow we did not find it, but we can see it. This happens on IE for Window properties.\n        proto = target;\n    }\n    const delegateName = zoneSymbol(name);\n    let delegate = null;\n    if (proto && (!(delegate = proto[delegateName]) || !proto.hasOwnProperty(delegateName))) {\n        delegate = proto[delegateName] = proto[name];\n        // check whether proto[name] is writable\n        // some property is readonly in safari, such as HtmlCanvasElement.prototype.toBlob\n        const desc = proto && ObjectGetOwnPropertyDescriptor(proto, name);\n        if (isPropertyWritable(desc)) {\n            const patchDelegate = patchFn(delegate, delegateName, name);\n            proto[name] = function () {\n                return patchDelegate(this, arguments);\n            };\n            attachOriginToPatched(proto[name], delegate);\n        }\n    }\n    return delegate;\n}\n// TODO: @JiaLiPassion, support cancel task later if necessary\nfunction patchMacroTask(obj, funcName, metaCreator) {\n    let setNative = null;\n    function scheduleTask(task) {\n        const data = task.data;\n        data.args[data.cbIdx] = function () {\n            task.invoke.apply(this, arguments);\n        };\n        setNative.apply(data.target, data.args);\n        return task;\n    }\n    setNative = patchMethod(obj, funcName, (delegate) => function (self, args) {\n        const meta = metaCreator(self, args);\n        if (meta.cbIdx >= 0 && typeof args[meta.cbIdx] === 'function') {\n            return scheduleMacroTaskWithCurrentZone(meta.name, args[meta.cbIdx], meta, scheduleTask);\n        }\n        else {\n            // cause an error by calling it directly.\n            return delegate.apply(self, args);\n        }\n    });\n}\nfunction attachOriginToPatched(patched, original) {\n    patched[zoneSymbol('OriginalDelegate')] = original;\n}\nlet isDetectedIEOrEdge = false;\nlet ieOrEdge = false;\nfunction isIE() {\n    try {\n        const ua = internalWindow.navigator.userAgent;\n        if (ua.indexOf('MSIE ') !== -1 || ua.indexOf('Trident/') !== -1) {\n            return true;\n        }\n    }\n    catch (error) {\n    }\n    return false;\n}\nfunction isIEOrEdge() {\n    if (isDetectedIEOrEdge) {\n        return ieOrEdge;\n    }\n    isDetectedIEOrEdge = true;\n    try {\n        const ua = internalWindow.navigator.userAgent;\n        if (ua.indexOf('MSIE ') !== -1 || ua.indexOf('Trident/') !== -1 || ua.indexOf('Edge/') !== -1) {\n            ieOrEdge = true;\n        }\n    }\n    catch (error) {\n    }\n    return ieOrEdge;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nZone.__load_patch('ZoneAwarePromise', (global, Zone, api) => {\n    const ObjectGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n    const ObjectDefineProperty = Object.defineProperty;\n    function readableObjectToString(obj) {\n        if (obj && obj.toString === Object.prototype.toString) {\n            const className = obj.constructor && obj.constructor.name;\n            return (className ? className : '') + ': ' + JSON.stringify(obj);\n        }\n        return obj ? obj.toString() : Object.prototype.toString.call(obj);\n    }\n    const __symbol__ = api.symbol;\n    const _uncaughtPromiseErrors = [];\n    const isDisableWrappingUncaughtPromiseRejection = global[__symbol__('DISABLE_WRAPPING_UNCAUGHT_PROMISE_REJECTION')] === true;\n    const symbolPromise = __symbol__('Promise');\n    const symbolThen = __symbol__('then');\n    const creationTrace = '__creationTrace__';\n    api.onUnhandledError = (e) => {\n        if (api.showUncaughtError()) {\n            const rejection = e && e.rejection;\n            if (rejection) {\n                console.error('Unhandled Promise rejection:', rejection instanceof Error ? rejection.message : rejection, '; Zone:', e.zone.name, '; Task:', e.task && e.task.source, '; Value:', rejection, rejection instanceof Error ? rejection.stack : undefined);\n            }\n            else {\n                console.error(e);\n            }\n        }\n    };\n    api.microtaskDrainDone = () => {\n        while (_uncaughtPromiseErrors.length) {\n            const uncaughtPromiseError = _uncaughtPromiseErrors.shift();\n            try {\n                uncaughtPromiseError.zone.runGuarded(() => {\n                    if (uncaughtPromiseError.throwOriginal) {\n                        throw uncaughtPromiseError.rejection;\n                    }\n                    throw uncaughtPromiseError;\n                });\n            }\n            catch (error) {\n                handleUnhandledRejection(error);\n            }\n        }\n    };\n    const UNHANDLED_PROMISE_REJECTION_HANDLER_SYMBOL = __symbol__('unhandledPromiseRejectionHandler');\n    function handleUnhandledRejection(e) {\n        api.onUnhandledError(e);\n        try {\n            const handler = Zone[UNHANDLED_PROMISE_REJECTION_HANDLER_SYMBOL];\n            if (typeof handler === 'function') {\n                handler.call(this, e);\n            }\n        }\n        catch (err) {\n        }\n    }\n    function isThenable(value) {\n        return value && value.then;\n    }\n    function forwardResolution(value) {\n        return value;\n    }\n    function forwardRejection(rejection) {\n        return ZoneAwarePromise.reject(rejection);\n    }\n    const symbolState = __symbol__('state');\n    const symbolValue = __symbol__('value');\n    const symbolFinally = __symbol__('finally');\n    const symbolParentPromiseValue = __symbol__('parentPromiseValue');\n    const symbolParentPromiseState = __symbol__('parentPromiseState');\n    const source = 'Promise.then';\n    const UNRESOLVED = null;\n    const RESOLVED = true;\n    const REJECTED = false;\n    const REJECTED_NO_CATCH = 0;\n    function makeResolver(promise, state) {\n        return (v) => {\n            try {\n                resolvePromise(promise, state, v);\n            }\n            catch (err) {\n                resolvePromise(promise, false, err);\n            }\n            // Do not return value or you will break the Promise spec.\n        };\n    }\n    const once = function () {\n        let wasCalled = false;\n        return function wrapper(wrappedFunction) {\n            return function () {\n                if (wasCalled) {\n                    return;\n                }\n                wasCalled = true;\n                wrappedFunction.apply(null, arguments);\n            };\n        };\n    };\n    const TYPE_ERROR = 'Promise resolved with itself';\n    const CURRENT_TASK_TRACE_SYMBOL = __symbol__('currentTaskTrace');\n    // Promise Resolution\n    function resolvePromise(promise, state, value) {\n        const onceWrapper = once();\n        if (promise === value) {\n            throw new TypeError(TYPE_ERROR);\n        }\n        if (promise[symbolState] === UNRESOLVED) {\n            // should only get value.then once based on promise spec.\n            let then = null;\n            try {\n                if (typeof value === 'object' || typeof value === 'function') {\n                    then = value && value.then;\n                }\n            }\n            catch (err) {\n                onceWrapper(() => {\n                    resolvePromise(promise, false, err);\n                })();\n                return promise;\n            }\n            // if (value instanceof ZoneAwarePromise) {\n            if (state !== REJECTED && value instanceof ZoneAwarePromise &&\n                value.hasOwnProperty(symbolState) && value.hasOwnProperty(symbolValue) &&\n                value[symbolState] !== UNRESOLVED) {\n                clearRejectedNoCatch(value);\n                resolvePromise(promise, value[symbolState], value[symbolValue]);\n            }\n            else if (state !== REJECTED && typeof then === 'function') {\n                try {\n                    then.call(value, onceWrapper(makeResolver(promise, state)), onceWrapper(makeResolver(promise, false)));\n                }\n                catch (err) {\n                    onceWrapper(() => {\n                        resolvePromise(promise, false, err);\n                    })();\n                }\n            }\n            else {\n                promise[symbolState] = state;\n                const queue = promise[symbolValue];\n                promise[symbolValue] = value;\n                if (promise[symbolFinally] === symbolFinally) {\n                    // the promise is generated by Promise.prototype.finally\n                    if (state === RESOLVED) {\n                        // the state is resolved, should ignore the value\n                        // and use parent promise value\n                        promise[symbolState] = promise[symbolParentPromiseState];\n                        promise[symbolValue] = promise[symbolParentPromiseValue];\n                    }\n                }\n                // record task information in value when error occurs, so we can\n                // do some additional work such as render longStackTrace\n                if (state === REJECTED && value instanceof Error) {\n                    // check if longStackTraceZone is here\n                    const trace = Zone.currentTask && Zone.currentTask.data &&\n                        Zone.currentTask.data[creationTrace];\n                    if (trace) {\n                        // only keep the long stack trace into error when in longStackTraceZone\n                        ObjectDefineProperty(value, CURRENT_TASK_TRACE_SYMBOL, { configurable: true, enumerable: false, writable: true, value: trace });\n                    }\n                }\n                for (let i = 0; i < queue.length;) {\n                    scheduleResolveOrReject(promise, queue[i++], queue[i++], queue[i++], queue[i++]);\n                }\n                if (queue.length == 0 && state == REJECTED) {\n                    promise[symbolState] = REJECTED_NO_CATCH;\n                    let uncaughtPromiseError = value;\n                    try {\n                        // Here we throws a new Error to print more readable error log\n                        // and if the value is not an error, zone.js builds an `Error`\n                        // Object here to attach the stack information.\n                        throw new Error('Uncaught (in promise): ' + readableObjectToString(value) +\n                            (value && value.stack ? '\\n' + value.stack : ''));\n                    }\n                    catch (err) {\n                        uncaughtPromiseError = err;\n                    }\n                    if (isDisableWrappingUncaughtPromiseRejection) {\n                        // If disable wrapping uncaught promise reject\n                        // use the value instead of wrapping it.\n                        uncaughtPromiseError.throwOriginal = true;\n                    }\n                    uncaughtPromiseError.rejection = value;\n                    uncaughtPromiseError.promise = promise;\n                    uncaughtPromiseError.zone = Zone.current;\n                    uncaughtPromiseError.task = Zone.currentTask;\n                    _uncaughtPromiseErrors.push(uncaughtPromiseError);\n                    api.scheduleMicroTask(); // to make sure that it is running\n                }\n            }\n        }\n        // Resolving an already resolved promise is a noop.\n        return promise;\n    }\n    const REJECTION_HANDLED_HANDLER = __symbol__('rejectionHandledHandler');\n    function clearRejectedNoCatch(promise) {\n        if (promise[symbolState] === REJECTED_NO_CATCH) {\n            // if the promise is rejected no catch status\n            // and queue.length > 0, means there is a error handler\n            // here to handle the rejected promise, we should trigger\n            // windows.rejectionhandled eventHandler or nodejs rejectionHandled\n            // eventHandler\n            try {\n                const handler = Zone[REJECTION_HANDLED_HANDLER];\n                if (handler && typeof handler === 'function') {\n                    handler.call(this, { rejection: promise[symbolValue], promise: promise });\n                }\n            }\n            catch (err) {\n            }\n            promise[symbolState] = REJECTED;\n            for (let i = 0; i < _uncaughtPromiseErrors.length; i++) {\n                if (promise === _uncaughtPromiseErrors[i].promise) {\n                    _uncaughtPromiseErrors.splice(i, 1);\n                }\n            }\n        }\n    }\n    function scheduleResolveOrReject(promise, zone, chainPromise, onFulfilled, onRejected) {\n        clearRejectedNoCatch(promise);\n        const promiseState = promise[symbolState];\n        const delegate = promiseState ?\n            (typeof onFulfilled === 'function') ? onFulfilled : forwardResolution :\n            (typeof onRejected === 'function') ? onRejected :\n                forwardRejection;\n        zone.scheduleMicroTask(source, () => {\n            try {\n                const parentPromiseValue = promise[symbolValue];\n                const isFinallyPromise = !!chainPromise && symbolFinally === chainPromise[symbolFinally];\n                if (isFinallyPromise) {\n                    // if the promise is generated from finally call, keep parent promise's state and value\n                    chainPromise[symbolParentPromiseValue] = parentPromiseValue;\n                    chainPromise[symbolParentPromiseState] = promiseState;\n                }\n                // should not pass value to finally callback\n                const value = zone.run(delegate, undefined, isFinallyPromise && delegate !== forwardRejection && delegate !== forwardResolution ?\n                    [] :\n                    [parentPromiseValue]);\n                resolvePromise(chainPromise, true, value);\n            }\n            catch (error) {\n                // if error occurs, should always return this error\n                resolvePromise(chainPromise, false, error);\n            }\n        }, chainPromise);\n    }\n    const ZONE_AWARE_PROMISE_TO_STRING = 'function ZoneAwarePromise() { [native code] }';\n    const noop = function () { };\n    const AggregateError = global.AggregateError;\n    class ZoneAwarePromise {\n        static toString() {\n            return ZONE_AWARE_PROMISE_TO_STRING;\n        }\n        static resolve(value) {\n            return resolvePromise(new this(null), RESOLVED, value);\n        }\n        static reject(error) {\n            return resolvePromise(new this(null), REJECTED, error);\n        }\n        static any(values) {\n            if (!values || typeof values[Symbol.iterator] !== 'function') {\n                return Promise.reject(new AggregateError([], 'All promises were rejected'));\n            }\n            const promises = [];\n            let count = 0;\n            try {\n                for (let v of values) {\n                    count++;\n                    promises.push(ZoneAwarePromise.resolve(v));\n                }\n            }\n            catch (err) {\n                return Promise.reject(new AggregateError([], 'All promises were rejected'));\n            }\n            if (count === 0) {\n                return Promise.reject(new AggregateError([], 'All promises were rejected'));\n            }\n            let finished = false;\n            const errors = [];\n            return new ZoneAwarePromise((resolve, reject) => {\n                for (let i = 0; i < promises.length; i++) {\n                    promises[i].then(v => {\n                        if (finished) {\n                            return;\n                        }\n                        finished = true;\n                        resolve(v);\n                    }, err => {\n                        errors.push(err);\n                        count--;\n                        if (count === 0) {\n                            finished = true;\n                            reject(new AggregateError(errors, 'All promises were rejected'));\n                        }\n                    });\n                }\n            });\n        }\n        ;\n        static race(values) {\n            let resolve;\n            let reject;\n            let promise = new this((res, rej) => {\n                resolve = res;\n                reject = rej;\n            });\n            function onResolve(value) {\n                resolve(value);\n            }\n            function onReject(error) {\n                reject(error);\n            }\n            for (let value of values) {\n                if (!isThenable(value)) {\n                    value = this.resolve(value);\n                }\n                value.then(onResolve, onReject);\n            }\n            return promise;\n        }\n        static all(values) {\n            return ZoneAwarePromise.allWithCallback(values);\n        }\n        static allSettled(values) {\n            const P = this && this.prototype instanceof ZoneAwarePromise ? this : ZoneAwarePromise;\n            return P.allWithCallback(values, {\n                thenCallback: (value) => ({ status: 'fulfilled', value }),\n                errorCallback: (err) => ({ status: 'rejected', reason: err })\n            });\n        }\n        static allWithCallback(values, callback) {\n            let resolve;\n            let reject;\n            let promise = new this((res, rej) => {\n                resolve = res;\n                reject = rej;\n            });\n            // Start at 2 to prevent prematurely resolving if .then is called immediately.\n            let unresolvedCount = 2;\n            let valueIndex = 0;\n            const resolvedValues = [];\n            for (let value of values) {\n                if (!isThenable(value)) {\n                    value = this.resolve(value);\n                }\n                const curValueIndex = valueIndex;\n                try {\n                    value.then((value) => {\n                        resolvedValues[curValueIndex] = callback ? callback.thenCallback(value) : value;\n                        unresolvedCount--;\n                        if (unresolvedCount === 0) {\n                            resolve(resolvedValues);\n                        }\n                    }, (err) => {\n                        if (!callback) {\n                            reject(err);\n                        }\n                        else {\n                            resolvedValues[curValueIndex] = callback.errorCallback(err);\n                            unresolvedCount--;\n                            if (unresolvedCount === 0) {\n                                resolve(resolvedValues);\n                            }\n                        }\n                    });\n                }\n                catch (thenErr) {\n                    reject(thenErr);\n                }\n                unresolvedCount++;\n                valueIndex++;\n            }\n            // Make the unresolvedCount zero-based again.\n            unresolvedCount -= 2;\n            if (unresolvedCount === 0) {\n                resolve(resolvedValues);\n            }\n            return promise;\n        }\n        constructor(executor) {\n            const promise = this;\n            if (!(promise instanceof ZoneAwarePromise)) {\n                throw new Error('Must be an instanceof Promise.');\n            }\n            promise[symbolState] = UNRESOLVED;\n            promise[symbolValue] = []; // queue;\n            try {\n                executor && executor(makeResolver(promise, RESOLVED), makeResolver(promise, REJECTED));\n            }\n            catch (error) {\n                resolvePromise(promise, false, error);\n            }\n        }\n        get [Symbol.toStringTag]() {\n            return 'Promise';\n        }\n        get [Symbol.species]() {\n            return ZoneAwarePromise;\n        }\n        then(onFulfilled, onRejected) {\n            let C = this.constructor[Symbol.species];\n            if (!C || typeof C !== 'function') {\n                C = this.constructor || ZoneAwarePromise;\n            }\n            const chainPromise = new C(noop);\n            const zone = Zone.current;\n            if (this[symbolState] == UNRESOLVED) {\n                this[symbolValue].push(zone, chainPromise, onFulfilled, onRejected);\n            }\n            else {\n                scheduleResolveOrReject(this, zone, chainPromise, onFulfilled, onRejected);\n            }\n            return chainPromise;\n        }\n        catch(onRejected) {\n            return this.then(null, onRejected);\n        }\n        finally(onFinally) {\n            let C = this.constructor[Symbol.species];\n            if (!C || typeof C !== 'function') {\n                C = ZoneAwarePromise;\n            }\n            const chainPromise = new C(noop);\n            chainPromise[symbolFinally] = symbolFinally;\n            const zone = Zone.current;\n            if (this[symbolState] == UNRESOLVED) {\n                this[symbolValue].push(zone, chainPromise, onFinally, onFinally);\n            }\n            else {\n                scheduleResolveOrReject(this, zone, chainPromise, onFinally, onFinally);\n            }\n            return chainPromise;\n        }\n    }\n    // Protect against aggressive optimizers dropping seemingly unused properties.\n    // E.g. Closure Compiler in advanced mode.\n    ZoneAwarePromise['resolve'] = ZoneAwarePromise.resolve;\n    ZoneAwarePromise['reject'] = ZoneAwarePromise.reject;\n    ZoneAwarePromise['race'] = ZoneAwarePromise.race;\n    ZoneAwarePromise['all'] = ZoneAwarePromise.all;\n    const NativePromise = global[symbolPromise] = global['Promise'];\n    global['Promise'] = ZoneAwarePromise;\n    const symbolThenPatched = __symbol__('thenPatched');\n    function patchThen(Ctor) {\n        const proto = Ctor.prototype;\n        const prop = ObjectGetOwnPropertyDescriptor(proto, 'then');\n        if (prop && (prop.writable === false || !prop.configurable)) {\n            // check Ctor.prototype.then propertyDescriptor is writable or not\n            // in meteor env, writable is false, we should ignore such case\n            return;\n        }\n        const originalThen = proto.then;\n        // Keep a reference to the original method.\n        proto[symbolThen] = originalThen;\n        Ctor.prototype.then = function (onResolve, onReject) {\n            const wrapped = new ZoneAwarePromise((resolve, reject) => {\n                originalThen.call(this, resolve, reject);\n            });\n            return wrapped.then(onResolve, onReject);\n        };\n        Ctor[symbolThenPatched] = true;\n    }\n    api.patchThen = patchThen;\n    function zoneify(fn) {\n        return function (self, args) {\n            let resultPromise = fn.apply(self, args);\n            if (resultPromise instanceof ZoneAwarePromise) {\n                return resultPromise;\n            }\n            let ctor = resultPromise.constructor;\n            if (!ctor[symbolThenPatched]) {\n                patchThen(ctor);\n            }\n            return resultPromise;\n        };\n    }\n    if (NativePromise) {\n        patchThen(NativePromise);\n        patchMethod(global, 'fetch', delegate => zoneify(delegate));\n    }\n    // This is not part of public API, but it is useful for tests, so we expose it.\n    Promise[Zone.__symbol__('uncaughtPromiseErrors')] = _uncaughtPromiseErrors;\n    return ZoneAwarePromise;\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// override Function.prototype.toString to make zone.js patched function\n// look like native function\nZone.__load_patch('toString', (global) => {\n    // patch Func.prototype.toString to let them look like native\n    const originalFunctionToString = Function.prototype.toString;\n    const ORIGINAL_DELEGATE_SYMBOL = zoneSymbol('OriginalDelegate');\n    const PROMISE_SYMBOL = zoneSymbol('Promise');\n    const ERROR_SYMBOL = zoneSymbol('Error');\n    const newFunctionToString = function toString() {\n        if (typeof this === 'function') {\n            const originalDelegate = this[ORIGINAL_DELEGATE_SYMBOL];\n            if (originalDelegate) {\n                if (typeof originalDelegate === 'function') {\n                    return originalFunctionToString.call(originalDelegate);\n                }\n                else {\n                    return Object.prototype.toString.call(originalDelegate);\n                }\n            }\n            if (this === Promise) {\n                const nativePromise = global[PROMISE_SYMBOL];\n                if (nativePromise) {\n                    return originalFunctionToString.call(nativePromise);\n                }\n            }\n            if (this === Error) {\n                const nativeError = global[ERROR_SYMBOL];\n                if (nativeError) {\n                    return originalFunctionToString.call(nativeError);\n                }\n            }\n        }\n        return originalFunctionToString.call(this);\n    };\n    newFunctionToString[ORIGINAL_DELEGATE_SYMBOL] = originalFunctionToString;\n    Function.prototype.toString = newFunctionToString;\n    // patch Object.prototype.toString to let them look like native\n    const originalObjectToString = Object.prototype.toString;\n    const PROMISE_OBJECT_TO_STRING = '[object Promise]';\n    Object.prototype.toString = function () {\n        if (typeof Promise === 'function' && this instanceof Promise) {\n            return PROMISE_OBJECT_TO_STRING;\n        }\n        return originalObjectToString.call(this);\n    };\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet passiveSupported = false;\nif (typeof window !== 'undefined') {\n    try {\n        const options = Object.defineProperty({}, 'passive', {\n            get: function () {\n                passiveSupported = true;\n            }\n        });\n        // Note: We pass the `options` object as the event handler too. This is not compatible with the\n        // signature of `addEventListener` or `removeEventListener` but enables us to remove the handler\n        // without an actual handler.\n        window.addEventListener('test', options, options);\n        window.removeEventListener('test', options, options);\n    }\n    catch (err) {\n        passiveSupported = false;\n    }\n}\n// an identifier to tell ZoneTask do not create a new invoke closure\nconst OPTIMIZED_ZONE_EVENT_TASK_DATA = {\n    useG: true\n};\nconst zoneSymbolEventNames = {};\nconst globalSources = {};\nconst EVENT_NAME_SYMBOL_REGX = new RegExp('^' + ZONE_SYMBOL_PREFIX + '(\\\\w+)(true|false)$');\nconst IMMEDIATE_PROPAGATION_SYMBOL = zoneSymbol('propagationStopped');\nfunction prepareEventNames(eventName, eventNameToString) {\n    const falseEventName = (eventNameToString ? eventNameToString(eventName) : eventName) + FALSE_STR;\n    const trueEventName = (eventNameToString ? eventNameToString(eventName) : eventName) + TRUE_STR;\n    const symbol = ZONE_SYMBOL_PREFIX + falseEventName;\n    const symbolCapture = ZONE_SYMBOL_PREFIX + trueEventName;\n    zoneSymbolEventNames[eventName] = {};\n    zoneSymbolEventNames[eventName][FALSE_STR] = symbol;\n    zoneSymbolEventNames[eventName][TRUE_STR] = symbolCapture;\n}\nfunction patchEventTarget(_global, api, apis, patchOptions) {\n    const ADD_EVENT_LISTENER = (patchOptions && patchOptions.add) || ADD_EVENT_LISTENER_STR;\n    const REMOVE_EVENT_LISTENER = (patchOptions && patchOptions.rm) || REMOVE_EVENT_LISTENER_STR;\n    const LISTENERS_EVENT_LISTENER = (patchOptions && patchOptions.listeners) || 'eventListeners';\n    const REMOVE_ALL_LISTENERS_EVENT_LISTENER = (patchOptions && patchOptions.rmAll) || 'removeAllListeners';\n    const zoneSymbolAddEventListener = zoneSymbol(ADD_EVENT_LISTENER);\n    const ADD_EVENT_LISTENER_SOURCE = '.' + ADD_EVENT_LISTENER + ':';\n    const PREPEND_EVENT_LISTENER = 'prependListener';\n    const PREPEND_EVENT_LISTENER_SOURCE = '.' + PREPEND_EVENT_LISTENER + ':';\n    const invokeTask = function (task, target, event) {\n        // for better performance, check isRemoved which is set\n        // by removeEventListener\n        if (task.isRemoved) {\n            return;\n        }\n        const delegate = task.callback;\n        if (typeof delegate === 'object' && delegate.handleEvent) {\n            // create the bind version of handleEvent when invoke\n            task.callback = (event) => delegate.handleEvent(event);\n            task.originalDelegate = delegate;\n        }\n        // invoke static task.invoke\n        // need to try/catch error here, otherwise, the error in one event listener\n        // will break the executions of the other event listeners. Also error will\n        // not remove the event listener when `once` options is true.\n        let error;\n        try {\n            task.invoke(task, target, [event]);\n        }\n        catch (err) {\n            error = err;\n        }\n        const options = task.options;\n        if (options && typeof options === 'object' && options.once) {\n            // if options.once is true, after invoke once remove listener here\n            // only browser need to do this, nodejs eventEmitter will cal removeListener\n            // inside EventEmitter.once\n            const delegate = task.originalDelegate ? task.originalDelegate : task.callback;\n            target[REMOVE_EVENT_LISTENER].call(target, event.type, delegate, options);\n        }\n        return error;\n    };\n    function globalCallback(context, event, isCapture) {\n        // https://github.com/angular/zone.js/issues/911, in IE, sometimes\n        // event will be undefined, so we need to use window.event\n        event = event || _global.event;\n        if (!event) {\n            return;\n        }\n        // event.target is needed for Samsung TV and SourceBuffer\n        // || global is needed https://github.com/angular/zone.js/issues/190\n        const target = context || event.target || _global;\n        const tasks = target[zoneSymbolEventNames[event.type][isCapture ? TRUE_STR : FALSE_STR]];\n        if (tasks) {\n            const errors = [];\n            // invoke all tasks which attached to current target with given event.type and capture = false\n            // for performance concern, if task.length === 1, just invoke\n            if (tasks.length === 1) {\n                const err = invokeTask(tasks[0], target, event);\n                err && errors.push(err);\n            }\n            else {\n                // https://github.com/angular/zone.js/issues/836\n                // copy the tasks array before invoke, to avoid\n                // the callback will remove itself or other listener\n                const copyTasks = tasks.slice();\n                for (let i = 0; i < copyTasks.length; i++) {\n                    if (event && event[IMMEDIATE_PROPAGATION_SYMBOL] === true) {\n                        break;\n                    }\n                    const err = invokeTask(copyTasks[i], target, event);\n                    err && errors.push(err);\n                }\n            }\n            // Since there is only one error, we don't need to schedule microTask\n            // to throw the error.\n            if (errors.length === 1) {\n                throw errors[0];\n            }\n            else {\n                for (let i = 0; i < errors.length; i++) {\n                    const err = errors[i];\n                    api.nativeScheduleMicroTask(() => {\n                        throw err;\n                    });\n                }\n            }\n        }\n    }\n    // global shared zoneAwareCallback to handle all event callback with capture = false\n    const globalZoneAwareCallback = function (event) {\n        return globalCallback(this, event, false);\n    };\n    // global shared zoneAwareCallback to handle all event callback with capture = true\n    const globalZoneAwareCaptureCallback = function (event) {\n        return globalCallback(this, event, true);\n    };\n    function patchEventTargetMethods(obj, patchOptions) {\n        if (!obj) {\n            return false;\n        }\n        let useGlobalCallback = true;\n        if (patchOptions && patchOptions.useG !== undefined) {\n            useGlobalCallback = patchOptions.useG;\n        }\n        const validateHandler = patchOptions && patchOptions.vh;\n        let checkDuplicate = true;\n        if (patchOptions && patchOptions.chkDup !== undefined) {\n            checkDuplicate = patchOptions.chkDup;\n        }\n        let returnTarget = false;\n        if (patchOptions && patchOptions.rt !== undefined) {\n            returnTarget = patchOptions.rt;\n        }\n        let proto = obj;\n        while (proto && !proto.hasOwnProperty(ADD_EVENT_LISTENER)) {\n            proto = ObjectGetPrototypeOf(proto);\n        }\n        if (!proto && obj[ADD_EVENT_LISTENER]) {\n            // somehow we did not find it, but we can see it. This happens on IE for Window properties.\n            proto = obj;\n        }\n        if (!proto) {\n            return false;\n        }\n        if (proto[zoneSymbolAddEventListener]) {\n            return false;\n        }\n        const eventNameToString = patchOptions && patchOptions.eventNameToString;\n        // a shared global taskData to pass data for scheduleEventTask\n        // so we do not need to create a new object just for pass some data\n        const taskData = {};\n        const nativeAddEventListener = proto[zoneSymbolAddEventListener] = proto[ADD_EVENT_LISTENER];\n        const nativeRemoveEventListener = proto[zoneSymbol(REMOVE_EVENT_LISTENER)] =\n            proto[REMOVE_EVENT_LISTENER];\n        const nativeListeners = proto[zoneSymbol(LISTENERS_EVENT_LISTENER)] =\n            proto[LISTENERS_EVENT_LISTENER];\n        const nativeRemoveAllListeners = proto[zoneSymbol(REMOVE_ALL_LISTENERS_EVENT_LISTENER)] =\n            proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER];\n        let nativePrependEventListener;\n        if (patchOptions && patchOptions.prepend) {\n            nativePrependEventListener = proto[zoneSymbol(patchOptions.prepend)] =\n                proto[patchOptions.prepend];\n        }\n        /**\n         * This util function will build an option object with passive option\n         * to handle all possible input from the user.\n         */\n        function buildEventListenerOptions(options, passive) {\n            if (!passiveSupported && typeof options === 'object' && options) {\n                // doesn't support passive but user want to pass an object as options.\n                // this will not work on some old browser, so we just pass a boolean\n                // as useCapture parameter\n                return !!options.capture;\n            }\n            if (!passiveSupported || !passive) {\n                return options;\n            }\n            if (typeof options === 'boolean') {\n                return { capture: options, passive: true };\n            }\n            if (!options) {\n                return { passive: true };\n            }\n            if (typeof options === 'object' && options.passive !== false) {\n                return Object.assign(Object.assign({}, options), { passive: true });\n            }\n            return options;\n        }\n        const customScheduleGlobal = function (task) {\n            // if there is already a task for the eventName + capture,\n            // just return, because we use the shared globalZoneAwareCallback here.\n            if (taskData.isExisting) {\n                return;\n            }\n            return nativeAddEventListener.call(taskData.target, taskData.eventName, taskData.capture ? globalZoneAwareCaptureCallback : globalZoneAwareCallback, taskData.options);\n        };\n        const customCancelGlobal = function (task) {\n            // if task is not marked as isRemoved, this call is directly\n            // from Zone.prototype.cancelTask, we should remove the task\n            // from tasksList of target first\n            if (!task.isRemoved) {\n                const symbolEventNames = zoneSymbolEventNames[task.eventName];\n                let symbolEventName;\n                if (symbolEventNames) {\n                    symbolEventName = symbolEventNames[task.capture ? TRUE_STR : FALSE_STR];\n                }\n                const existingTasks = symbolEventName && task.target[symbolEventName];\n                if (existingTasks) {\n                    for (let i = 0; i < existingTasks.length; i++) {\n                        const existingTask = existingTasks[i];\n                        if (existingTask === task) {\n                            existingTasks.splice(i, 1);\n                            // set isRemoved to data for faster invokeTask check\n                            task.isRemoved = true;\n                            if (existingTasks.length === 0) {\n                                // all tasks for the eventName + capture have gone,\n                                // remove globalZoneAwareCallback and remove the task cache from target\n                                task.allRemoved = true;\n                                task.target[symbolEventName] = null;\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n            // if all tasks for the eventName + capture have gone,\n            // we will really remove the global event callback,\n            // if not, return\n            if (!task.allRemoved) {\n                return;\n            }\n            return nativeRemoveEventListener.call(task.target, task.eventName, task.capture ? globalZoneAwareCaptureCallback : globalZoneAwareCallback, task.options);\n        };\n        const customScheduleNonGlobal = function (task) {\n            return nativeAddEventListener.call(taskData.target, taskData.eventName, task.invoke, taskData.options);\n        };\n        const customSchedulePrepend = function (task) {\n            return nativePrependEventListener.call(taskData.target, taskData.eventName, task.invoke, taskData.options);\n        };\n        const customCancelNonGlobal = function (task) {\n            return nativeRemoveEventListener.call(task.target, task.eventName, task.invoke, task.options);\n        };\n        const customSchedule = useGlobalCallback ? customScheduleGlobal : customScheduleNonGlobal;\n        const customCancel = useGlobalCallback ? customCancelGlobal : customCancelNonGlobal;\n        const compareTaskCallbackVsDelegate = function (task, delegate) {\n            const typeOfDelegate = typeof delegate;\n            return (typeOfDelegate === 'function' && task.callback === delegate) ||\n                (typeOfDelegate === 'object' && task.originalDelegate === delegate);\n        };\n        const compare = (patchOptions && patchOptions.diff) ? patchOptions.diff : compareTaskCallbackVsDelegate;\n        const unpatchedEvents = Zone[zoneSymbol('UNPATCHED_EVENTS')];\n        const passiveEvents = _global[zoneSymbol('PASSIVE_EVENTS')];\n        const makeAddListener = function (nativeListener, addSource, customScheduleFn, customCancelFn, returnTarget = false, prepend = false) {\n            return function () {\n                const target = this || _global;\n                let eventName = arguments[0];\n                if (patchOptions && patchOptions.transferEventName) {\n                    eventName = patchOptions.transferEventName(eventName);\n                }\n                let delegate = arguments[1];\n                if (!delegate) {\n                    return nativeListener.apply(this, arguments);\n                }\n                if (isNode && eventName === 'uncaughtException') {\n                    // don't patch uncaughtException of nodejs to prevent endless loop\n                    return nativeListener.apply(this, arguments);\n                }\n                // don't create the bind delegate function for handleEvent\n                // case here to improve addEventListener performance\n                // we will create the bind delegate when invoke\n                let isHandleEvent = false;\n                if (typeof delegate !== 'function') {\n                    if (!delegate.handleEvent) {\n                        return nativeListener.apply(this, arguments);\n                    }\n                    isHandleEvent = true;\n                }\n                if (validateHandler && !validateHandler(nativeListener, delegate, target, arguments)) {\n                    return;\n                }\n                const passive = passiveSupported && !!passiveEvents && passiveEvents.indexOf(eventName) !== -1;\n                const options = buildEventListenerOptions(arguments[2], passive);\n                if (unpatchedEvents) {\n                    // check upatched list\n                    for (let i = 0; i < unpatchedEvents.length; i++) {\n                        if (eventName === unpatchedEvents[i]) {\n                            if (passive) {\n                                return nativeListener.call(target, eventName, delegate, options);\n                            }\n                            else {\n                                return nativeListener.apply(this, arguments);\n                            }\n                        }\n                    }\n                }\n                const capture = !options ? false : typeof options === 'boolean' ? true : options.capture;\n                const once = options && typeof options === 'object' ? options.once : false;\n                const zone = Zone.current;\n                let symbolEventNames = zoneSymbolEventNames[eventName];\n                if (!symbolEventNames) {\n                    prepareEventNames(eventName, eventNameToString);\n                    symbolEventNames = zoneSymbolEventNames[eventName];\n                }\n                const symbolEventName = symbolEventNames[capture ? TRUE_STR : FALSE_STR];\n                let existingTasks = target[symbolEventName];\n                let isExisting = false;\n                if (existingTasks) {\n                    // already have task registered\n                    isExisting = true;\n                    if (checkDuplicate) {\n                        for (let i = 0; i < existingTasks.length; i++) {\n                            if (compare(existingTasks[i], delegate)) {\n                                // same callback, same capture, same event name, just return\n                                return;\n                            }\n                        }\n                    }\n                }\n                else {\n                    existingTasks = target[symbolEventName] = [];\n                }\n                let source;\n                const constructorName = target.constructor['name'];\n                const targetSource = globalSources[constructorName];\n                if (targetSource) {\n                    source = targetSource[eventName];\n                }\n                if (!source) {\n                    source = constructorName + addSource +\n                        (eventNameToString ? eventNameToString(eventName) : eventName);\n                }\n                // do not create a new object as task.data to pass those things\n                // just use the global shared one\n                taskData.options = options;\n                if (once) {\n                    // if addEventListener with once options, we don't pass it to\n                    // native addEventListener, instead we keep the once setting\n                    // and handle ourselves.\n                    taskData.options.once = false;\n                }\n                taskData.target = target;\n                taskData.capture = capture;\n                taskData.eventName = eventName;\n                taskData.isExisting = isExisting;\n                const data = useGlobalCallback ? OPTIMIZED_ZONE_EVENT_TASK_DATA : undefined;\n                // keep taskData into data to allow onScheduleEventTask to access the task information\n                if (data) {\n                    data.taskData = taskData;\n                }\n                const task = zone.scheduleEventTask(source, delegate, data, customScheduleFn, customCancelFn);\n                // should clear taskData.target to avoid memory leak\n                // issue, https://github.com/angular/angular/issues/20442\n                taskData.target = null;\n                // need to clear up taskData because it is a global object\n                if (data) {\n                    data.taskData = null;\n                }\n                // have to save those information to task in case\n                // application may call task.zone.cancelTask() directly\n                if (once) {\n                    options.once = true;\n                }\n                if (!(!passiveSupported && typeof task.options === 'boolean')) {\n                    // if not support passive, and we pass an option object\n                    // to addEventListener, we should save the options to task\n                    task.options = options;\n                }\n                task.target = target;\n                task.capture = capture;\n                task.eventName = eventName;\n                if (isHandleEvent) {\n                    // save original delegate for compare to check duplicate\n                    task.originalDelegate = delegate;\n                }\n                if (!prepend) {\n                    existingTasks.push(task);\n                }\n                else {\n                    existingTasks.unshift(task);\n                }\n                if (returnTarget) {\n                    return target;\n                }\n            };\n        };\n        proto[ADD_EVENT_LISTENER] = makeAddListener(nativeAddEventListener, ADD_EVENT_LISTENER_SOURCE, customSchedule, customCancel, returnTarget);\n        if (nativePrependEventListener) {\n            proto[PREPEND_EVENT_LISTENER] = makeAddListener(nativePrependEventListener, PREPEND_EVENT_LISTENER_SOURCE, customSchedulePrepend, customCancel, returnTarget, true);\n        }\n        proto[REMOVE_EVENT_LISTENER] = function () {\n            const target = this || _global;\n            let eventName = arguments[0];\n            if (patchOptions && patchOptions.transferEventName) {\n                eventName = patchOptions.transferEventName(eventName);\n            }\n            const options = arguments[2];\n            const capture = !options ? false : typeof options === 'boolean' ? true : options.capture;\n            const delegate = arguments[1];\n            if (!delegate) {\n                return nativeRemoveEventListener.apply(this, arguments);\n            }\n            if (validateHandler &&\n                !validateHandler(nativeRemoveEventListener, delegate, target, arguments)) {\n                return;\n            }\n            const symbolEventNames = zoneSymbolEventNames[eventName];\n            let symbolEventName;\n            if (symbolEventNames) {\n                symbolEventName = symbolEventNames[capture ? TRUE_STR : FALSE_STR];\n            }\n            const existingTasks = symbolEventName && target[symbolEventName];\n            if (existingTasks) {\n                for (let i = 0; i < existingTasks.length; i++) {\n                    const existingTask = existingTasks[i];\n                    if (compare(existingTask, delegate)) {\n                        existingTasks.splice(i, 1);\n                        // set isRemoved to data for faster invokeTask check\n                        existingTask.isRemoved = true;\n                        if (existingTasks.length === 0) {\n                            // all tasks for the eventName + capture have gone,\n                            // remove globalZoneAwareCallback and remove the task cache from target\n                            existingTask.allRemoved = true;\n                            target[symbolEventName] = null;\n                            // in the target, we have an event listener which is added by on_property\n                            // such as target.onclick = function() {}, so we need to clear this internal\n                            // property too if all delegates all removed\n                            if (typeof eventName === 'string') {\n                                const onPropertySymbol = ZONE_SYMBOL_PREFIX + 'ON_PROPERTY' + eventName;\n                                target[onPropertySymbol] = null;\n                            }\n                        }\n                        existingTask.zone.cancelTask(existingTask);\n                        if (returnTarget) {\n                            return target;\n                        }\n                        return;\n                    }\n                }\n            }\n            // issue 930, didn't find the event name or callback\n            // from zone kept existingTasks, the callback maybe\n            // added outside of zone, we need to call native removeEventListener\n            // to try to remove it.\n            return nativeRemoveEventListener.apply(this, arguments);\n        };\n        proto[LISTENERS_EVENT_LISTENER] = function () {\n            const target = this || _global;\n            let eventName = arguments[0];\n            if (patchOptions && patchOptions.transferEventName) {\n                eventName = patchOptions.transferEventName(eventName);\n            }\n            const listeners = [];\n            const tasks = findEventTasks(target, eventNameToString ? eventNameToString(eventName) : eventName);\n            for (let i = 0; i < tasks.length; i++) {\n                const task = tasks[i];\n                let delegate = task.originalDelegate ? task.originalDelegate : task.callback;\n                listeners.push(delegate);\n            }\n            return listeners;\n        };\n        proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER] = function () {\n            const target = this || _global;\n            let eventName = arguments[0];\n            if (!eventName) {\n                const keys = Object.keys(target);\n                for (let i = 0; i < keys.length; i++) {\n                    const prop = keys[i];\n                    const match = EVENT_NAME_SYMBOL_REGX.exec(prop);\n                    let evtName = match && match[1];\n                    // in nodejs EventEmitter, removeListener event is\n                    // used for monitoring the removeListener call,\n                    // so just keep removeListener eventListener until\n                    // all other eventListeners are removed\n                    if (evtName && evtName !== 'removeListener') {\n                        this[REMOVE_ALL_LISTENERS_EVENT_LISTENER].call(this, evtName);\n                    }\n                }\n                // remove removeListener listener finally\n                this[REMOVE_ALL_LISTENERS_EVENT_LISTENER].call(this, 'removeListener');\n            }\n            else {\n                if (patchOptions && patchOptions.transferEventName) {\n                    eventName = patchOptions.transferEventName(eventName);\n                }\n                const symbolEventNames = zoneSymbolEventNames[eventName];\n                if (symbolEventNames) {\n                    const symbolEventName = symbolEventNames[FALSE_STR];\n                    const symbolCaptureEventName = symbolEventNames[TRUE_STR];\n                    const tasks = target[symbolEventName];\n                    const captureTasks = target[symbolCaptureEventName];\n                    if (tasks) {\n                        const removeTasks = tasks.slice();\n                        for (let i = 0; i < removeTasks.length; i++) {\n                            const task = removeTasks[i];\n                            let delegate = task.originalDelegate ? task.originalDelegate : task.callback;\n                            this[REMOVE_EVENT_LISTENER].call(this, eventName, delegate, task.options);\n                        }\n                    }\n                    if (captureTasks) {\n                        const removeTasks = captureTasks.slice();\n                        for (let i = 0; i < removeTasks.length; i++) {\n                            const task = removeTasks[i];\n                            let delegate = task.originalDelegate ? task.originalDelegate : task.callback;\n                            this[REMOVE_EVENT_LISTENER].call(this, eventName, delegate, task.options);\n                        }\n                    }\n                }\n            }\n            if (returnTarget) {\n                return this;\n            }\n        };\n        // for native toString patch\n        attachOriginToPatched(proto[ADD_EVENT_LISTENER], nativeAddEventListener);\n        attachOriginToPatched(proto[REMOVE_EVENT_LISTENER], nativeRemoveEventListener);\n        if (nativeRemoveAllListeners) {\n            attachOriginToPatched(proto[REMOVE_ALL_LISTENERS_EVENT_LISTENER], nativeRemoveAllListeners);\n        }\n        if (nativeListeners) {\n            attachOriginToPatched(proto[LISTENERS_EVENT_LISTENER], nativeListeners);\n        }\n        return true;\n    }\n    let results = [];\n    for (let i = 0; i < apis.length; i++) {\n        results[i] = patchEventTargetMethods(apis[i], patchOptions);\n    }\n    return results;\n}\nfunction findEventTasks(target, eventName) {\n    if (!eventName) {\n        const foundTasks = [];\n        for (let prop in target) {\n            const match = EVENT_NAME_SYMBOL_REGX.exec(prop);\n            let evtName = match && match[1];\n            if (evtName && (!eventName || evtName === eventName)) {\n                const tasks = target[prop];\n                if (tasks) {\n                    for (let i = 0; i < tasks.length; i++) {\n                        foundTasks.push(tasks[i]);\n                    }\n                }\n            }\n        }\n        return foundTasks;\n    }\n    let symbolEventName = zoneSymbolEventNames[eventName];\n    if (!symbolEventName) {\n        prepareEventNames(eventName);\n        symbolEventName = zoneSymbolEventNames[eventName];\n    }\n    const captureFalseTasks = target[symbolEventName[FALSE_STR]];\n    const captureTrueTasks = target[symbolEventName[TRUE_STR]];\n    if (!captureFalseTasks) {\n        return captureTrueTasks ? captureTrueTasks.slice() : [];\n    }\n    else {\n        return captureTrueTasks ? captureFalseTasks.concat(captureTrueTasks) :\n            captureFalseTasks.slice();\n    }\n}\nfunction patchEventPrototype(global, api) {\n    const Event = global['Event'];\n    if (Event && Event.prototype) {\n        api.patchMethod(Event.prototype, 'stopImmediatePropagation', (delegate) => function (self, args) {\n            self[IMMEDIATE_PROPAGATION_SYMBOL] = true;\n            // we need to call the native stopImmediatePropagation\n            // in case in some hybrid application, some part of\n            // application will be controlled by zone, some are not\n            delegate && delegate.apply(self, args);\n        });\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction patchCallbacks(api, target, targetName, method, callbacks) {\n    const symbol = Zone.__symbol__(method);\n    if (target[symbol]) {\n        return;\n    }\n    const nativeDelegate = target[symbol] = target[method];\n    target[method] = function (name, opts, options) {\n        if (opts && opts.prototype) {\n            callbacks.forEach(function (callback) {\n                const source = `${targetName}.${method}::` + callback;\n                const prototype = opts.prototype;\n                if (prototype.hasOwnProperty(callback)) {\n                    const descriptor = api.ObjectGetOwnPropertyDescriptor(prototype, callback);\n                    if (descriptor && descriptor.value) {\n                        descriptor.value = api.wrapWithCurrentZone(descriptor.value, source);\n                        api._redefineProperty(opts.prototype, callback, descriptor);\n                    }\n                    else if (prototype[callback]) {\n                        prototype[callback] = api.wrapWithCurrentZone(prototype[callback], source);\n                    }\n                }\n                else if (prototype[callback]) {\n                    prototype[callback] = api.wrapWithCurrentZone(prototype[callback], source);\n                }\n            });\n        }\n        return nativeDelegate.call(target, name, opts, options);\n    };\n    api.attachOriginToPatched(target[method], nativeDelegate);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction filterProperties(target, onProperties, ignoreProperties) {\n    if (!ignoreProperties || ignoreProperties.length === 0) {\n        return onProperties;\n    }\n    const tip = ignoreProperties.filter(ip => ip.target === target);\n    if (!tip || tip.length === 0) {\n        return onProperties;\n    }\n    const targetIgnoreProperties = tip[0].ignoreProperties;\n    return onProperties.filter(op => targetIgnoreProperties.indexOf(op) === -1);\n}\nfunction patchFilteredProperties(target, onProperties, ignoreProperties, prototype) {\n    // check whether target is available, sometimes target will be undefined\n    // because different browser or some 3rd party plugin.\n    if (!target) {\n        return;\n    }\n    const filteredProperties = filterProperties(target, onProperties, ignoreProperties);\n    patchOnProperties(target, filteredProperties, prototype);\n}\n/**\n * Get all event name properties which the event name startsWith `on`\n * from the target object itself, inherited properties are not considered.\n */\nfunction getOnEventNames(target) {\n    return Object.getOwnPropertyNames(target)\n        .filter(name => name.startsWith('on') && name.length > 2)\n        .map(name => name.substring(2));\n}\nfunction propertyDescriptorPatch(api, _global) {\n    if (isNode && !isMix) {\n        return;\n    }\n    if (Zone[api.symbol('patchEvents')]) {\n        // events are already been patched by legacy patch.\n        return;\n    }\n    const ignoreProperties = _global['__Zone_ignore_on_properties'];\n    // for browsers that we can patch the descriptor:  Chrome & Firefox\n    let patchTargets = [];\n    if (isBrowser) {\n        const internalWindow = window;\n        patchTargets = patchTargets.concat([\n            'Document', 'SVGElement', 'Element', 'HTMLElement', 'HTMLBodyElement', 'HTMLMediaElement',\n            'HTMLFrameSetElement', 'HTMLFrameElement', 'HTMLIFrameElement', 'HTMLMarqueeElement', 'Worker'\n        ]);\n        const ignoreErrorProperties = isIE() ? [{ target: internalWindow, ignoreProperties: ['error'] }] : [];\n        // in IE/Edge, onProp not exist in window object, but in WindowPrototype\n        // so we need to pass WindowPrototype to check onProp exist or not\n        patchFilteredProperties(internalWindow, getOnEventNames(internalWindow), ignoreProperties ? ignoreProperties.concat(ignoreErrorProperties) : ignoreProperties, ObjectGetPrototypeOf(internalWindow));\n    }\n    patchTargets = patchTargets.concat([\n        'XMLHttpRequest', 'XMLHttpRequestEventTarget', 'IDBIndex', 'IDBRequest', 'IDBOpenDBRequest',\n        'IDBDatabase', 'IDBTransaction', 'IDBCursor', 'WebSocket'\n    ]);\n    for (let i = 0; i < patchTargets.length; i++) {\n        const target = _global[patchTargets[i]];\n        target && target.prototype &&\n            patchFilteredProperties(target.prototype, getOnEventNames(target.prototype), ignoreProperties);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nZone.__load_patch('util', (global, Zone, api) => {\n    // Collect native event names by looking at properties\n    // on the global namespace, e.g. 'onclick'.\n    const eventNames = getOnEventNames(global);\n    api.patchOnProperties = patchOnProperties;\n    api.patchMethod = patchMethod;\n    api.bindArguments = bindArguments;\n    api.patchMacroTask = patchMacroTask;\n    // In earlier version of zone.js (<0.9.0), we use env name `__zone_symbol__BLACK_LISTED_EVENTS` to\n    // define which events will not be patched by `Zone.js`.\n    // In newer version (>=0.9.0), we change the env name to `__zone_symbol__UNPATCHED_EVENTS` to keep\n    // the name consistent with angular repo.\n    // The  `__zone_symbol__BLACK_LISTED_EVENTS` is deprecated, but it is still be supported for\n    // backwards compatibility.\n    const SYMBOL_BLACK_LISTED_EVENTS = Zone.__symbol__('BLACK_LISTED_EVENTS');\n    const SYMBOL_UNPATCHED_EVENTS = Zone.__symbol__('UNPATCHED_EVENTS');\n    if (global[SYMBOL_UNPATCHED_EVENTS]) {\n        global[SYMBOL_BLACK_LISTED_EVENTS] = global[SYMBOL_UNPATCHED_EVENTS];\n    }\n    if (global[SYMBOL_BLACK_LISTED_EVENTS]) {\n        Zone[SYMBOL_BLACK_LISTED_EVENTS] = Zone[SYMBOL_UNPATCHED_EVENTS] =\n            global[SYMBOL_BLACK_LISTED_EVENTS];\n    }\n    api.patchEventPrototype = patchEventPrototype;\n    api.patchEventTarget = patchEventTarget;\n    api.isIEOrEdge = isIEOrEdge;\n    api.ObjectDefineProperty = ObjectDefineProperty;\n    api.ObjectGetOwnPropertyDescriptor = ObjectGetOwnPropertyDescriptor;\n    api.ObjectCreate = ObjectCreate;\n    api.ArraySlice = ArraySlice;\n    api.patchClass = patchClass;\n    api.wrapWithCurrentZone = wrapWithCurrentZone;\n    api.filterProperties = filterProperties;\n    api.attachOriginToPatched = attachOriginToPatched;\n    api._redefineProperty = Object.defineProperty;\n    api.patchCallbacks = patchCallbacks;\n    api.getGlobalObjects = () => ({\n        globalSources,\n        zoneSymbolEventNames,\n        eventNames,\n        isBrowser,\n        isMix,\n        isNode,\n        TRUE_STR,\n        FALSE_STR,\n        ZONE_SYMBOL_PREFIX,\n        ADD_EVENT_LISTENER_STR,\n        REMOVE_EVENT_LISTENER_STR\n    });\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst taskSymbol = zoneSymbol('zoneTask');\nfunction patchTimer(window, setName, cancelName, nameSuffix) {\n    let setNative = null;\n    let clearNative = null;\n    setName += nameSuffix;\n    cancelName += nameSuffix;\n    const tasksByHandleId = {};\n    function scheduleTask(task) {\n        const data = task.data;\n        data.args[0] = function () {\n            return task.invoke.apply(this, arguments);\n        };\n        data.handleId = setNative.apply(window, data.args);\n        return task;\n    }\n    function clearTask(task) {\n        return clearNative.call(window, task.data.handleId);\n    }\n    setNative =\n        patchMethod(window, setName, (delegate) => function (self, args) {\n            if (typeof args[0] === 'function') {\n                const options = {\n                    isPeriodic: nameSuffix === 'Interval',\n                    delay: (nameSuffix === 'Timeout' || nameSuffix === 'Interval') ? args[1] || 0 :\n                        undefined,\n                    args: args\n                };\n                const callback = args[0];\n                args[0] = function timer() {\n                    try {\n                        return callback.apply(this, arguments);\n                    }\n                    finally {\n                        // issue-934, task will be cancelled\n                        // even it is a periodic task such as\n                        // setInterval\n                        // https://github.com/angular/angular/issues/40387\n                        // Cleanup tasksByHandleId should be handled before scheduleTask\n                        // Since some zoneSpec may intercept and doesn't trigger\n                        // scheduleFn(scheduleTask) provided here.\n                        if (!(options.isPeriodic)) {\n                            if (typeof options.handleId === 'number') {\n                                // in non-nodejs env, we remove timerId\n                                // from local cache\n                                delete tasksByHandleId[options.handleId];\n                            }\n                            else if (options.handleId) {\n                                // Node returns complex objects as handleIds\n                                // we remove task reference from timer object\n                                options.handleId[taskSymbol] = null;\n                            }\n                        }\n                    }\n                };\n                const task = scheduleMacroTaskWithCurrentZone(setName, args[0], options, scheduleTask, clearTask);\n                if (!task) {\n                    return task;\n                }\n                // Node.js must additionally support the ref and unref functions.\n                const handle = task.data.handleId;\n                if (typeof handle === 'number') {\n                    // for non nodejs env, we save handleId: task\n                    // mapping in local cache for clearTimeout\n                    tasksByHandleId[handle] = task;\n                }\n                else if (handle) {\n                    // for nodejs env, we save task\n                    // reference in timerId Object for clearTimeout\n                    handle[taskSymbol] = task;\n                }\n                // check whether handle is null, because some polyfill or browser\n                // may return undefined from setTimeout/setInterval/setImmediate/requestAnimationFrame\n                if (handle && handle.ref && handle.unref && typeof handle.ref === 'function' &&\n                    typeof handle.unref === 'function') {\n                    task.ref = handle.ref.bind(handle);\n                    task.unref = handle.unref.bind(handle);\n                }\n                if (typeof handle === 'number' || handle) {\n                    return handle;\n                }\n                return task;\n            }\n            else {\n                // cause an error by calling it directly.\n                return delegate.apply(window, args);\n            }\n        });\n    clearNative =\n        patchMethod(window, cancelName, (delegate) => function (self, args) {\n            const id = args[0];\n            let task;\n            if (typeof id === 'number') {\n                // non nodejs env.\n                task = tasksByHandleId[id];\n            }\n            else {\n                // nodejs env.\n                task = id && id[taskSymbol];\n                // other environments.\n                if (!task) {\n                    task = id;\n                }\n            }\n            if (task && typeof task.type === 'string') {\n                if (task.state !== 'notScheduled' &&\n                    (task.cancelFn && task.data.isPeriodic || task.runCount === 0)) {\n                    if (typeof id === 'number') {\n                        delete tasksByHandleId[id];\n                    }\n                    else if (id) {\n                        id[taskSymbol] = null;\n                    }\n                    // Do not cancel already canceled functions\n                    task.zone.cancelTask(task);\n                }\n            }\n            else {\n                // cause an error by calling it directly.\n                delegate.apply(window, args);\n            }\n        });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction patchCustomElements(_global, api) {\n    const { isBrowser, isMix } = api.getGlobalObjects();\n    if ((!isBrowser && !isMix) || !_global['customElements'] || !('customElements' in _global)) {\n        return;\n    }\n    const callbacks = ['connectedCallback', 'disconnectedCallback', 'adoptedCallback', 'attributeChangedCallback'];\n    api.patchCallbacks(api, _global.customElements, 'customElements', 'define', callbacks);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction eventTargetPatch(_global, api) {\n    if (Zone[api.symbol('patchEventTarget')]) {\n        // EventTarget is already patched.\n        return;\n    }\n    const { eventNames, zoneSymbolEventNames, TRUE_STR, FALSE_STR, ZONE_SYMBOL_PREFIX } = api.getGlobalObjects();\n    //  predefine all __zone_symbol__ + eventName + true/false string\n    for (let i = 0; i < eventNames.length; i++) {\n        const eventName = eventNames[i];\n        const falseEventName = eventName + FALSE_STR;\n        const trueEventName = eventName + TRUE_STR;\n        const symbol = ZONE_SYMBOL_PREFIX + falseEventName;\n        const symbolCapture = ZONE_SYMBOL_PREFIX + trueEventName;\n        zoneSymbolEventNames[eventName] = {};\n        zoneSymbolEventNames[eventName][FALSE_STR] = symbol;\n        zoneSymbolEventNames[eventName][TRUE_STR] = symbolCapture;\n    }\n    const EVENT_TARGET = _global['EventTarget'];\n    if (!EVENT_TARGET || !EVENT_TARGET.prototype) {\n        return;\n    }\n    api.patchEventTarget(_global, api, [EVENT_TARGET && EVENT_TARGET.prototype]);\n    return true;\n}\nfunction patchEvent(global, api) {\n    api.patchEventPrototype(global, api);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nZone.__load_patch('legacy', (global) => {\n    const legacyPatch = global[Zone.__symbol__('legacyPatch')];\n    if (legacyPatch) {\n        legacyPatch();\n    }\n});\nZone.__load_patch('queueMicrotask', (global, Zone, api) => {\n    api.patchMethod(global, 'queueMicrotask', delegate => {\n        return function (self, args) {\n            Zone.current.scheduleMicroTask('queueMicrotask', args[0]);\n        };\n    });\n});\nZone.__load_patch('timers', (global) => {\n    const set = 'set';\n    const clear = 'clear';\n    patchTimer(global, set, clear, 'Timeout');\n    patchTimer(global, set, clear, 'Interval');\n    patchTimer(global, set, clear, 'Immediate');\n});\nZone.__load_patch('requestAnimationFrame', (global) => {\n    patchTimer(global, 'request', 'cancel', 'AnimationFrame');\n    patchTimer(global, 'mozRequest', 'mozCancel', 'AnimationFrame');\n    patchTimer(global, 'webkitRequest', 'webkitCancel', 'AnimationFrame');\n});\nZone.__load_patch('blocking', (global, Zone) => {\n    const blockingMethods = ['alert', 'prompt', 'confirm'];\n    for (let i = 0; i < blockingMethods.length; i++) {\n        const name = blockingMethods[i];\n        patchMethod(global, name, (delegate, symbol, name) => {\n            return function (s, args) {\n                return Zone.current.run(delegate, global, args, name);\n            };\n        });\n    }\n});\nZone.__load_patch('EventTarget', (global, Zone, api) => {\n    patchEvent(global, api);\n    eventTargetPatch(global, api);\n    // patch XMLHttpRequestEventTarget's addEventListener/removeEventListener\n    const XMLHttpRequestEventTarget = global['XMLHttpRequestEventTarget'];\n    if (XMLHttpRequestEventTarget && XMLHttpRequestEventTarget.prototype) {\n        api.patchEventTarget(global, api, [XMLHttpRequestEventTarget.prototype]);\n    }\n});\nZone.__load_patch('MutationObserver', (global, Zone, api) => {\n    patchClass('MutationObserver');\n    patchClass('WebKitMutationObserver');\n});\nZone.__load_patch('IntersectionObserver', (global, Zone, api) => {\n    patchClass('IntersectionObserver');\n});\nZone.__load_patch('FileReader', (global, Zone, api) => {\n    patchClass('FileReader');\n});\nZone.__load_patch('on_property', (global, Zone, api) => {\n    propertyDescriptorPatch(api, global);\n});\nZone.__load_patch('customElements', (global, Zone, api) => {\n    patchCustomElements(global, api);\n});\nZone.__load_patch('XHR', (global, Zone) => {\n    // Treat XMLHttpRequest as a macrotask.\n    patchXHR(global);\n    const XHR_TASK = zoneSymbol('xhrTask');\n    const XHR_SYNC = zoneSymbol('xhrSync');\n    const XHR_LISTENER = zoneSymbol('xhrListener');\n    const XHR_SCHEDULED = zoneSymbol('xhrScheduled');\n    const XHR_URL = zoneSymbol('xhrURL');\n    const XHR_ERROR_BEFORE_SCHEDULED = zoneSymbol('xhrErrorBeforeScheduled');\n    function patchXHR(window) {\n        const XMLHttpRequest = window['XMLHttpRequest'];\n        if (!XMLHttpRequest) {\n            // XMLHttpRequest is not available in service worker\n            return;\n        }\n        const XMLHttpRequestPrototype = XMLHttpRequest.prototype;\n        function findPendingTask(target) {\n            return target[XHR_TASK];\n        }\n        let oriAddListener = XMLHttpRequestPrototype[ZONE_SYMBOL_ADD_EVENT_LISTENER];\n        let oriRemoveListener = XMLHttpRequestPrototype[ZONE_SYMBOL_REMOVE_EVENT_LISTENER];\n        if (!oriAddListener) {\n            const XMLHttpRequestEventTarget = window['XMLHttpRequestEventTarget'];\n            if (XMLHttpRequestEventTarget) {\n                const XMLHttpRequestEventTargetPrototype = XMLHttpRequestEventTarget.prototype;\n                oriAddListener = XMLHttpRequestEventTargetPrototype[ZONE_SYMBOL_ADD_EVENT_LISTENER];\n                oriRemoveListener = XMLHttpRequestEventTargetPrototype[ZONE_SYMBOL_REMOVE_EVENT_LISTENER];\n            }\n        }\n        const READY_STATE_CHANGE = 'readystatechange';\n        const SCHEDULED = 'scheduled';\n        function scheduleTask(task) {\n            const data = task.data;\n            const target = data.target;\n            target[XHR_SCHEDULED] = false;\n            target[XHR_ERROR_BEFORE_SCHEDULED] = false;\n            // remove existing event listener\n            const listener = target[XHR_LISTENER];\n            if (!oriAddListener) {\n                oriAddListener = target[ZONE_SYMBOL_ADD_EVENT_LISTENER];\n                oriRemoveListener = target[ZONE_SYMBOL_REMOVE_EVENT_LISTENER];\n            }\n            if (listener) {\n                oriRemoveListener.call(target, READY_STATE_CHANGE, listener);\n            }\n            const newListener = target[XHR_LISTENER] = () => {\n                if (target.readyState === target.DONE) {\n                    // sometimes on some browsers XMLHttpRequest will fire onreadystatechange with\n                    // readyState=4 multiple times, so we need to check task state here\n                    if (!data.aborted && target[XHR_SCHEDULED] && task.state === SCHEDULED) {\n                        // check whether the xhr has registered onload listener\n                        // if that is the case, the task should invoke after all\n                        // onload listeners finish.\n                        // Also if the request failed without response (status = 0), the load event handler\n                        // will not be triggered, in that case, we should also invoke the placeholder callback\n                        // to close the XMLHttpRequest::send macroTask.\n                        // https://github.com/angular/angular/issues/38795\n                        const loadTasks = target[Zone.__symbol__('loadfalse')];\n                        if (target.status !== 0 && loadTasks && loadTasks.length > 0) {\n                            const oriInvoke = task.invoke;\n                            task.invoke = function () {\n                                // need to load the tasks again, because in other\n                                // load listener, they may remove themselves\n                                const loadTasks = target[Zone.__symbol__('loadfalse')];\n                                for (let i = 0; i < loadTasks.length; i++) {\n                                    if (loadTasks[i] === task) {\n                                        loadTasks.splice(i, 1);\n                                    }\n                                }\n                                if (!data.aborted && task.state === SCHEDULED) {\n                                    oriInvoke.call(task);\n                                }\n                            };\n                            loadTasks.push(task);\n                        }\n                        else {\n                            task.invoke();\n                        }\n                    }\n                    else if (!data.aborted && target[XHR_SCHEDULED] === false) {\n                        // error occurs when xhr.send()\n                        target[XHR_ERROR_BEFORE_SCHEDULED] = true;\n                    }\n                }\n            };\n            oriAddListener.call(target, READY_STATE_CHANGE, newListener);\n            const storedTask = target[XHR_TASK];\n            if (!storedTask) {\n                target[XHR_TASK] = task;\n            }\n            sendNative.apply(target, data.args);\n            target[XHR_SCHEDULED] = true;\n            return task;\n        }\n        function placeholderCallback() { }\n        function clearTask(task) {\n            const data = task.data;\n            // Note - ideally, we would call data.target.removeEventListener here, but it's too late\n            // to prevent it from firing. So instead, we store info for the event listener.\n            data.aborted = true;\n            return abortNative.apply(data.target, data.args);\n        }\n        const openNative = patchMethod(XMLHttpRequestPrototype, 'open', () => function (self, args) {\n            self[XHR_SYNC] = args[2] == false;\n            self[XHR_URL] = args[1];\n            return openNative.apply(self, args);\n        });\n        const XMLHTTPREQUEST_SOURCE = 'XMLHttpRequest.send';\n        const fetchTaskAborting = zoneSymbol('fetchTaskAborting');\n        const fetchTaskScheduling = zoneSymbol('fetchTaskScheduling');\n        const sendNative = patchMethod(XMLHttpRequestPrototype, 'send', () => function (self, args) {\n            if (Zone.current[fetchTaskScheduling] === true) {\n                // a fetch is scheduling, so we are using xhr to polyfill fetch\n                // and because we already schedule macroTask for fetch, we should\n                // not schedule a macroTask for xhr again\n                return sendNative.apply(self, args);\n            }\n            if (self[XHR_SYNC]) {\n                // if the XHR is sync there is no task to schedule, just execute the code.\n                return sendNative.apply(self, args);\n            }\n            else {\n                const options = { target: self, url: self[XHR_URL], isPeriodic: false, args: args, aborted: false };\n                const task = scheduleMacroTaskWithCurrentZone(XMLHTTPREQUEST_SOURCE, placeholderCallback, options, scheduleTask, clearTask);\n                if (self && self[XHR_ERROR_BEFORE_SCHEDULED] === true && !options.aborted &&\n                    task.state === SCHEDULED) {\n                    // xhr request throw error when send\n                    // we should invoke task instead of leaving a scheduled\n                    // pending macroTask\n                    task.invoke();\n                }\n            }\n        });\n        const abortNative = patchMethod(XMLHttpRequestPrototype, 'abort', () => function (self, args) {\n            const task = findPendingTask(self);\n            if (task && typeof task.type == 'string') {\n                // If the XHR has already completed, do nothing.\n                // If the XHR has already been aborted, do nothing.\n                // Fix #569, call abort multiple times before done will cause\n                // macroTask task count be negative number\n                if (task.cancelFn == null || (task.data && task.data.aborted)) {\n                    return;\n                }\n                task.zone.cancelTask(task);\n            }\n            else if (Zone.current[fetchTaskAborting] === true) {\n                // the abort is called from fetch polyfill, we need to call native abort of XHR.\n                return abortNative.apply(self, args);\n            }\n            // Otherwise, we are trying to abort an XHR which has not yet been sent, so there is no\n            // task\n            // to cancel. Do nothing.\n        });\n    }\n});\nZone.__load_patch('geolocation', (global) => {\n    /// GEO_LOCATION\n    if (global['navigator'] && global['navigator'].geolocation) {\n        patchPrototype(global['navigator'].geolocation, ['getCurrentPosition', 'watchPosition']);\n    }\n});\nZone.__load_patch('PromiseRejectionEvent', (global, Zone) => {\n    // handle unhandled promise rejection\n    function findPromiseRejectionHandler(evtName) {\n        return function (e) {\n            const eventTasks = findEventTasks(global, evtName);\n            eventTasks.forEach(eventTask => {\n                // windows has added unhandledrejection event listener\n                // trigger the event listener\n                const PromiseRejectionEvent = global['PromiseRejectionEvent'];\n                if (PromiseRejectionEvent) {\n                    const evt = new PromiseRejectionEvent(evtName, { promise: e.promise, reason: e.rejection });\n                    eventTask.invoke(evt);\n                }\n            });\n        };\n    }\n    if (global['PromiseRejectionEvent']) {\n        Zone[zoneSymbol('unhandledPromiseRejectionHandler')] =\n            findPromiseRejectionHandler('unhandledrejection');\n        Zone[zoneSymbol('rejectionHandledHandler')] =\n            findPromiseRejectionHandler('rejectionhandled');\n    }\n});\n","// https://github.com/rbuckton/reflect-metadata\nrequire('../modules/esnext.reflect.define-metadata');\nrequire('../modules/esnext.reflect.delete-metadata');\nrequire('../modules/esnext.reflect.get-metadata');\nrequire('../modules/esnext.reflect.get-metadata-keys');\nrequire('../modules/esnext.reflect.get-own-metadata');\nrequire('../modules/esnext.reflect.get-own-metadata-keys');\nrequire('../modules/esnext.reflect.has-metadata');\nrequire('../modules/esnext.reflect.has-own-metadata');\nrequire('../modules/esnext.reflect.metadata');\n"],"sourceRoot":"webpack:///","file":"polyfills.4af5ec4d599f790b.js"}